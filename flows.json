[
    {
        "id": "959654febd2675df",
        "type": "tab",
        "label": "Catch SPA",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6e18303f78d73c6e",
        "type": "tab",
        "label": "Auth Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f6851f6212eb23ed",
        "type": "tab",
        "label": "Facility Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "37dd95d269875e4a",
        "type": "tab",
        "label": "Room Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bd5efab3a54ad20c",
        "type": "tab",
        "label": "Booking Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1f9ad198f05c78e0",
        "type": "tab",
        "label": "My Booking Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ef473e5856f6634c",
        "type": "tab",
        "label": "Schedule Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ad6b87de6e10c339",
        "type": "tab",
        "label": "Audit Log Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7b1d8464d4eeb295",
        "type": "tab",
        "label": "Socket Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e713e992ef10c6ef",
        "type": "group",
        "z": "6e18303f78d73c6e",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "dc10e10d5ad5b29f",
            "783009e76506f4ac",
            "1fede23e0ea5f9e5",
            "7b8fe5c856099f49",
            "01e4e1b598319715",
            "82d058830d4ceb1d",
            "8aba317151570a38",
            "4d54edb4e492d2d9",
            "5be9363c051a9fa6",
            "eaddd29ee67511e9",
            "6a6b7a242b437191",
            "6a97fe73e3dd47ea",
            "e481ecfaed1e4a1d",
            "4e8df7b44bfdd9ed",
            "4f5d4a1875df4d36",
            "e09d9be90e6627e3",
            "5c39b63a3ebb4a63",
            "7413f2ac899a2d03",
            "cf45316525946b18"
        ],
        "x": 74,
        "y": 119,
        "w": 1472,
        "h": 422
    },
    {
        "id": "3e82cbd016ae10ad",
        "type": "group",
        "z": "959654febd2675df",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4088509c69c94b07",
            "a6d77efa37086fdb",
            "414eeecd4b42d6c7",
            "a871177578706ddd"
        ],
        "x": 294,
        "y": 179,
        "w": 812,
        "h": 82
    },
    {
        "id": "6f5a2056e6dbbb95",
        "type": "group",
        "z": "f6851f6212eb23ed",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9fc4af25f225331b",
            "b6cab3c170a6933b",
            "2e92d20fa8764e9d",
            "d8505e493d0cc0fe",
            "8b0fc36ec31dc06f",
            "741871df92cd9a57",
            "6ae2496922c5c06c",
            "199bf403f409f890",
            "aa67d135e210cf0d",
            "87c9e869436eec69",
            "81250eb6303cd52a"
        ],
        "x": 34,
        "y": 139,
        "w": 1472,
        "h": 262
    },
    {
        "id": "aa1e98539aa1c396",
        "type": "group",
        "z": "37dd95d269875e4a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cbc88d6992fd6244",
            "8c40e70770102473",
            "6515c6ccbe020aec",
            "7fa7b4b75a06dbd0",
            "aba4e32da9bcb3fb",
            "69be1a66d4cf79b6",
            "f4503f000a8c8298",
            "1fda12a0f63cfad1",
            "7817a703d1be77aa",
            "464f66952bdab47e",
            "03ca3a88533e851b",
            "63c845f4a7559173"
        ],
        "x": 74,
        "y": 19,
        "w": 1472,
        "h": 302
    },
    {
        "id": "43e2605169538c26",
        "type": "group",
        "z": "37dd95d269875e4a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "cd333c9b6c4cdda9",
            "b2db5fd42dcc0f04",
            "ca54e389846ed556",
            "9e8a701f796ea424",
            "4387afda2196ac5e",
            "22d0dc9c70904d93",
            "d1e2eeb3dc8a7baf",
            "96b0ad5d6251979a",
            "d69a2c26cc9f11f4",
            "f4a6b7abba1b853d",
            "9c0d4d10d5da0824",
            "17707c68f920a188",
            "a031401ecd3508de"
        ],
        "x": 54,
        "y": 339,
        "w": 1532,
        "h": 302
    },
    {
        "id": "731b84d8bf335b59",
        "type": "group",
        "z": "37dd95d269875e4a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8f6dc201eb39db7f",
            "6fc035c0c6e89a92",
            "006a159ba1dfc5a1",
            "a1ed93e7596aee60",
            "1dba4f40f290cccf",
            "21f2cec970bbfd1c",
            "961abd4227914836",
            "5d94436a08194e41",
            "8e3fbc7cd8b9157c",
            "bdd90f60c2ae5d17",
            "c74226e5de532eb0",
            "db5c186592d2a610"
        ],
        "x": 54,
        "y": 1459,
        "w": 1532,
        "h": 262
    },
    {
        "id": "bddb83f6550c1c97",
        "type": "group",
        "z": "37dd95d269875e4a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "3c078bd0c5d8df5f",
            "1bbf582482b68d30",
            "28385584a48e4371",
            "06f562fde793b236",
            "f762ee3ff328e7cd",
            "ecfa6dbba57472fe",
            "5c63a40e03c4acc2",
            "7bb450e6dbd39a15",
            "4201ab2e0ef62410",
            "71c313ebddc64a42",
            "bd8f97fec7558845",
            "a9d70497e0f3ef64",
            "0d97231f6269a296"
        ],
        "x": 34,
        "y": 659,
        "w": 1572,
        "h": 262
    },
    {
        "id": "35b9f398219455c3",
        "type": "group",
        "z": "37dd95d269875e4a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "52aafdd0e13af00c",
            "9d7fd5160cb070dc",
            "2e2f24f033fdb12b",
            "43aa5890e3f9b088",
            "6c7516dbba02306e",
            "29f02c5b5fc0e4e3",
            "c6d2166a6c5bb5be",
            "8d87ea4ed40cebc3",
            "a1a916a8a5dd826e",
            "8b7921bc8d96309c",
            "393a75a4de27840f",
            "3b5c8c025c7be344",
            "c74f1b8ad4ca48b9",
            "c0eaa6845aa0eafc",
            "3fc5c22a589843b9"
        ],
        "x": 34,
        "y": 939,
        "w": 1732,
        "h": 282
    },
    {
        "id": "504069dc06829e62",
        "type": "group",
        "z": "bd5efab3a54ad20c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "f49e1e067a9d555c",
            "747405ee397774a0",
            "892bcbf8f3e47265",
            "bb29fab178cd7225",
            "994f23d2cbc7df98",
            "f27de9691e262046",
            "5e495eac96e9b125",
            "3e9a8064bd5699d9",
            "5cebd9d63084d28f",
            "884dbc834c6e5c30",
            "23bcda06d730b551",
            "68ef2017d8d63028"
        ],
        "x": 54,
        "y": 39,
        "w": 1472,
        "h": 302
    },
    {
        "id": "224b4e5df0a4aff1",
        "type": "group",
        "z": "bd5efab3a54ad20c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a7a050dd92954768",
            "c8276d90f5b27e27",
            "1f40028b455c3ee7",
            "59619a6753f556ba",
            "7fa30fa1e35c73bb",
            "decb45220f690651",
            "4c2d55d3b2ae811a",
            "8f776e8533361a7b",
            "488e589395636742",
            "a1e31873174aa9c6",
            "809f9cc877822a87",
            "d0689467ab220886",
            "5452fc51071cf111",
            "831c579302862374",
            "793ab45e4a9c57b7",
            "b923140d6bc0a35a"
        ],
        "x": 34,
        "y": 819,
        "w": 1572,
        "h": 342
    },
    {
        "id": "7451396dbeecdd0d",
        "type": "group",
        "z": "1f9ad198f05c78e0",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4bc1e1e3301be371",
            "1f14ed077d48e282",
            "694abf437cc3aff9",
            "d467e2ed1c706795",
            "aa1ea3764e89ebf5",
            "6ccf5e0db011d125",
            "1994a1d8db5bae35",
            "dad71a52c698f1f0",
            "c1715a202d930714",
            "2b3116444771ed19",
            "4f53c1fc3ad29e5d"
        ],
        "x": 54,
        "y": 59,
        "w": 1512,
        "h": 202
    },
    {
        "id": "d08782927857db71",
        "type": "group",
        "z": "1f9ad198f05c78e0",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "90c0eef733541071",
            "2daef27ecde9bc49",
            "d66f47967ece8973",
            "f88f6ebc293717bf",
            "2f687e1ccb4bc830",
            "aebeee91a1e69f0e",
            "8089bf6139fa5cc1",
            "ede2942c134e8197",
            "b6d2c489811ca47d",
            "4a29b7e628b685a0",
            "e1457a63b4ab7e12",
            "8a68fe56d0ce9d2b",
            "4fe731263751ee6a",
            "aa15b3e082f78521"
        ],
        "x": 14,
        "y": 299,
        "w": 1612,
        "h": 242
    },
    {
        "id": "01efc9251ab27577",
        "type": "group",
        "z": "ef473e5856f6634c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1559a397916dbc81",
            "156d551f9094bd51",
            "63959d4082a511b2",
            "45db05f2a8852e07",
            "7508071c22bef509",
            "22a843db0fbf92fb",
            "681f51eb831cf4e4",
            "2c726c3038e4c793",
            "24d024c054437478",
            "94bdb6158ef11a00",
            "80a880d798c8e049"
        ],
        "x": 74,
        "y": 79,
        "w": 1472,
        "h": 262
    },
    {
        "id": "5313c9ea75a5b369",
        "type": "group",
        "z": "37dd95d269875e4a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1fc813a0b0ee5259",
            "cd6dc72ddff52036",
            "bdd6bce524b5de25",
            "ad28dc62dcbadec1",
            "d82a38baa1b33d29",
            "edb201094d6a51c6",
            "a383bacc60bb4a43",
            "201417b0dcf73486",
            "4997da6227298859",
            "c9b09c78d983da48",
            "d38c116554111b17"
        ],
        "x": 94,
        "y": 1739,
        "w": 1472,
        "h": 222
    },
    {
        "id": "a3285fd9ae16509c",
        "type": "group",
        "z": "37dd95d269875e4a",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "dbeba861c30a2419",
            "d6844f72e50939e2",
            "b0b0d10d4f67a1d6",
            "76845cf1372789ee",
            "a4770e1f4b82cba0",
            "9ddf9b61f1607ede",
            "ef80f4c1229a47f0",
            "3131bc55bb666978",
            "21dba808b3974276",
            "9fa742df7df4ab9d",
            "089d6f77a91f1151"
        ],
        "x": 74,
        "y": 1239,
        "w": 1512,
        "h": 202
    },
    {
        "id": "7d57500539d60d1e",
        "type": "group",
        "z": "ad6b87de6e10c339",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "bc5b3d729a98eac6",
            "e6fac01ece71eb84",
            "096143eadbc9e208",
            "d001d5d0cb43f8b9",
            "eaec2353243ea4ce",
            "3ccf9ffbcaf225cd",
            "03ce3017c78e4172",
            "6a39f92812cc1a82",
            "0728023a9a46bab6",
            "2c82a5750c1fc9c6",
            "08bff8baafb751bc",
            "e7ada9b6bfd5b994",
            "c926a16db63b18b5"
        ],
        "x": 134,
        "y": 119,
        "w": 1472,
        "h": 362
    },
    {
        "id": "3b28d018233610dd",
        "type": "group",
        "z": "7b1d8464d4eeb295",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "bc1d3039e6fec733",
            "a7b22cdff551f99d",
            "20b6c09cf936e09b"
        ],
        "x": 284,
        "y": 359,
        "w": 502,
        "h": 82
    },
    {
        "id": "44c1d437b2505fb5",
        "type": "group",
        "z": "7b1d8464d4eeb295",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "960c6df0e138e3d6",
            "d3135d685060af63",
            "83a70607a20416e0"
        ],
        "x": 284,
        "y": 179,
        "w": 502,
        "h": 82
    },
    {
        "id": "e3ede9509861dd36",
        "type": "group",
        "z": "bd5efab3a54ad20c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "32c3a07f9566f97e",
            "c3998ac322473dce",
            "10ebd13de58f4e3d",
            "af7ba6e49f107e79",
            "8892cfa1146e77aa",
            "7f92e639274d0d44",
            "f5dcfc7abed36e14",
            "c2df3858e6a8ac23",
            "7c9dd83c0d5efa4a",
            "2d9d91e3916d3cbc",
            "9db06c38f4ff3690",
            "0fd3e7474f8a0f4a",
            "c3edb91ea4864ce2",
            "70926ee0c56f5289",
            "0c20f55bc978cdac",
            "a325ed36b7a36cbd",
            "2876a7001beb3eb4",
            "753577e69d565b49",
            "bae75b83d0b38da1",
            "c28d5c1b6a874681",
            "2fcd527e308e8ab4",
            "4e89a1054bae3441",
            "2b36261bd517fbfe",
            "0924975e479915e9",
            "5b0d9a0e193a130f",
            "897273774df7fcfc",
            "9c33635f345b25e7",
            "b1df615bc7d3d852"
        ],
        "x": 14,
        "y": 359,
        "w": 2312,
        "h": 402
    },
    {
        "id": "b83eba8ab2a13179",
        "type": "group",
        "z": "bd5efab3a54ad20c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6b3a733c2ea08eac",
            "4221a36a44d6f6b2",
            "072456cf4d64d623",
            "37328f7790631f63",
            "70ec3f479e767c50",
            "bf942c56bf439f54",
            "70423602c900313d",
            "af371fbaabf72056",
            "83121f413b1f8062",
            "65f70ae94a4f3ee9",
            "74acc2b91641212c",
            "84f863e44afdc3ee",
            "267d99de9baea157",
            "ee9894caac0ba38f",
            "c2085e1b81e77e48",
            "5fd7870f1b6ce1c1",
            "57ad84ef751037ef",
            "0d027e6f34732504",
            "d6a9ba42a3b788cc",
            "93b2a79b785357ed",
            "bda614fed1997ad1",
            "a79ef35ef6bd60a6",
            "fc5ea47cc62cf18c",
            "e944b42d36dd1686",
            "90fb6e79f160d504",
            "2d1caa2cc7f191f9",
            "47ae447451fd8118"
        ],
        "x": 14,
        "y": 1179,
        "w": 2312,
        "h": 402
    },
    {
        "id": "4180c6902cea3879",
        "type": "group",
        "z": "bd5efab3a54ad20c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "4e28f83077ad3c28",
            "ef48bb785c4baeaf",
            "22cfcc851a1f1dcb",
            "e1dfc631c7092deb",
            "27c6ba67c509ae21",
            "e3c4ea068077a80f",
            "6c8b7f203d7fad54",
            "5243695fcbc82cd6",
            "d1dc58abaa8fdd02",
            "03cdf80309d00fdd",
            "f58c856ef93b8919",
            "e0fdbc9b53a37e07",
            "338a5459c259ecb0",
            "498f59dd1e610291",
            "6fa92bff013a605f",
            "ebbbc1f7d5bba450",
            "fa5a8218cf6cd2ba",
            "509de403e86b1dd2",
            "8033a98a0b984807",
            "e5b8b4bf8f7125d3",
            "2264c1f2fc046785",
            "6ab0bbf66ae5ee01",
            "09f0bb0669b6a0af",
            "55e160807079571b",
            "da5c0f351906902b",
            "650f1579f1d62527",
            "2784bf0207fb79f1"
        ],
        "x": 14,
        "y": 1619,
        "w": 2312,
        "h": 402
    },
    {
        "id": "8ba1cb52c18f200a",
        "type": "users_config",
        "appPath": "/users",
        "jwtCookieName": "nr.nodeUsers.jwt",
        "jwtHttpsOnly": false
    },
    {
        "id": "443dca5366e7983c",
        "type": "MySQLdatabase",
        "name": "",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "room_booking_system",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "f04d1c4ebddd8b38",
        "type": "swagger-doc",
        "summary": "API login",
        "description": "",
        "tags": "auth",
        "parameters": [],
        "responses": {
            "default": {
                "description": "default"
            }
        },
        "requestBody": {
            "description": "",
            "content": {
                "application/json": {
                    "schema": {
                        "type": "object",
                        "properties": {
                            "username": {
                                "type": "string",
                                "example": "user1"
                            },
                            "password": {
                                "type": "string",
                                "example": "password"
                            }
                        },
                        "required": [
                            "username",
                            "password"
                        ]
                    }
                }
            },
            "required": true
        },
        "deprecated": false
    },
    {
        "id": "2a2c4ccdc9e7690a",
        "type": "swagger-doc",
        "summary": "",
        "description": "",
        "tags": "facilities",
        "parameters": [],
        "responses": {
            "default": {
                "description": ""
            }
        },
        "deprecated": false
    },
    {
        "id": "51a89dca420ac4d8",
        "type": "swagger-doc",
        "summary": "",
        "description": "",
        "tags": "rooms",
        "parameters": [
            {
                "name": "name",
                "in": "query",
                "required": false,
                "type": "string"
            },
            {
                "name": "location",
                "in": "query",
                "required": false,
                "type": "string"
            },
            {
                "name": "min_capacity",
                "in": "query",
                "required": false,
                "type": "integer"
            },
            {
                "name": "facility_id",
                "in": "query",
                "required": false,
                "type": "integer"
            }
        ],
        "responses": {
            "default": {
                "description": ""
            }
        },
        "deprecated": false
    },
    {
        "id": "626d3e02856c1e8d",
        "type": "swagger-doc",
        "summary": "",
        "description": "",
        "tags": "rooms",
        "parameters": [],
        "responses": {
            "default": {
                "description": ""
            }
        },
        "requestBody": {
            "description": "",
            "content": {
                "application/json": {
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "A01"
                            },
                            "capacity": {
                                "type": "number",
                                "example": "10"
                            },
                            "location": {
                                "type": "string",
                                "example": "Floor 1, A building"
                            },
                            "facility_ids": {
                                "type": "array",
                                "example": "[1, 2, 3]"
                            }
                        },
                        "required": [
                            "name",
                            "capacity",
                            "location",
                            "facility_ids"
                        ]
                    }
                }
            }
        },
        "deprecated": false
    },
    {
        "id": "b58757df08e36ba6",
        "type": "swagger-doc",
        "summary": "",
        "description": "",
        "tags": "rooms",
        "parameters": [
            {
                "name": "room_id",
                "in": "path",
                "description": "Room ID",
                "required": true,
                "type": "integer"
            }
        ],
        "responses": {
            "default": {
                "description": ""
            }
        },
        "requestBody": {
            "description": "",
            "content": {
                "application/json": {
                    "schema": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "example": "A01"
                            },
                            "capacity": {
                                "type": "number",
                                "example": "10"
                            },
                            "location": {
                                "type": "string",
                                "example": "Floor 1, A building"
                            },
                            "facility_ids": {
                                "type": "array",
                                "example": "[1, 2, 3]"
                            }
                        },
                        "required": [
                            "name",
                            "capacity",
                            "location",
                            "facility_ids"
                        ]
                    }
                }
            }
        },
        "deprecated": false
    },
    {
        "id": "001a5c8915d25374",
        "type": "swagger-doc",
        "summary": "",
        "description": "",
        "tags": "rooms",
        "parameters": [
            {
                "name": "room_id",
                "in": "path",
                "required": false
            }
        ],
        "responses": {
            "default": {
                "description": ""
            }
        },
        "deprecated": false
    },
    {
        "id": "1d44248fdfa89dbd",
        "type": "swagger-doc",
        "summary": "",
        "description": "",
        "tags": "rooms",
        "parameters": [],
        "responses": {
            "default": {
                "description": ""
            }
        },
        "deprecated": false
    },
    {
        "id": "15242996b35b834d",
        "type": "swagger-doc",
        "summary": "",
        "description": "",
        "tags": "rooms",
        "parameters": [
            {
                "name": "room_id",
                "in": "path",
                "required": false,
                "type": "number"
            }
        ],
        "responses": {
            "default": {
                "description": ""
            }
        },
        "deprecated": false
    },
    {
        "id": "30f9eae301534002",
        "type": "swagger-doc",
        "summary": "",
        "description": "",
        "tags": "rooms",
        "parameters": [],
        "responses": {
            "default": {
                "description": ""
            }
        },
        "deprecated": false
    },
    {
        "id": "0712b4ea054f8946",
        "type": "swagger-doc",
        "summary": "",
        "description": "",
        "tags": "bookings",
        "parameters": [
            {
                "name": "room_name",
                "in": "query",
                "required": false,
                "type": "string"
            },
            {
                "name": "start_time",
                "in": "query",
                "required": false,
                "type": "string"
            },
            {
                "name": "end_time",
                "in": "query",
                "required": false,
                "type": "string"
            },
            {
                "name": "status",
                "in": "query",
                "required": false,
                "type": "string"
            }
        ],
        "responses": {
            "default": {
                "description": ""
            }
        },
        "deprecated": false
    },
    {
        "id": "9c31e44552665096",
        "type": "swagger-doc",
        "summary": "",
        "description": "",
        "tags": "bookings",
        "parameters": [
            {
                "name": "booking_id",
                "in": "path",
                "required": true,
                "type": "integer"
            }
        ],
        "responses": {
            "default": {
                "description": ""
            }
        },
        "deprecated": false
    },
    {
        "id": "783314020467f92a",
        "type": "swagger-doc",
        "summary": "",
        "description": "",
        "tags": "bookings",
        "parameters": [],
        "responses": {
            "default": {
                "description": ""
            }
        },
        "requestBody": {
            "description": "",
            "content": {
                "application/json": {
                    "schema": {
                        "type": "object",
                        "properties": {
                            "room_id": {
                                "type": "number",
                                "example": "1"
                            },
                            "title": {
                                "type": "string",
                                "example": "meeting"
                            },
                            "start_time": {
                                "type": "string",
                                "example": "2025-10-20T10:00:00"
                            },
                            "end_time": {
                                "type": "string",
                                "example": "2025-10-20T11:00:00"
                            }
                        },
                        "required": [
                            "room_id",
                            "title",
                            "end_time",
                            "start_time"
                        ]
                    }
                }
            }
        },
        "deprecated": false
    },
    {
        "id": "9d44b144c22a41cb",
        "type": "swagger-doc",
        "summary": "",
        "description": "",
        "tags": "bookings",
        "parameters": [
            {
                "name": "booking_id",
                "in": "path",
                "required": true,
                "type": "integer"
            }
        ],
        "responses": {
            "default": {
                "description": ""
            }
        },
        "requestBody": {
            "description": "",
            "content": {
                "application/json": {
                    "schema": {
                        "type": "object",
                        "properties": {
                            "reason": {
                                "type": "string",
                                "example": "Reason"
                            }
                        },
                        "required": [
                            "reason"
                        ]
                    }
                }
            }
        },
        "deprecated": false
    },
    {
        "id": "b3a53d07c5bede1b",
        "type": "swagger-doc",
        "summary": "",
        "description": "",
        "tags": "bookings",
        "parameters": [
            {
                "name": "booking_id",
                "in": "path",
                "required": true,
                "type": "integer"
            }
        ],
        "responses": {
            "default": {
                "description": ""
            }
        },
        "requestBody": {
            "description": "",
            "content": {
                "application/json": {
                    "schema": {
                        "type": "object",
                        "properties": {
                            "reason": {
                                "type": "string",
                                "example": "Reason"
                            }
                        },
                        "required": [
                            "reason"
                        ]
                    }
                }
            }
        },
        "deprecated": false
    },
    {
        "id": "0012e4184beb4eda",
        "type": "swagger-doc",
        "summary": "",
        "description": "",
        "tags": "my bookings",
        "parameters": [
            {
                "name": "room_name",
                "in": "query",
                "required": false,
                "type": "string"
            },
            {
                "name": "start_time",
                "in": "query",
                "required": false,
                "type": "string"
            },
            {
                "name": "status",
                "in": "query",
                "required": false,
                "type": "string"
            },
            {
                "name": "limit",
                "in": "query",
                "required": true,
                "type": "integer"
            },
            {
                "name": "offset",
                "in": "query",
                "required": true,
                "type": "integer"
            }
        ],
        "responses": {
            "default": {
                "description": ""
            }
        },
        "deprecated": false
    },
    {
        "id": "13c01cadfd978a95",
        "type": "swagger-doc",
        "summary": "",
        "description": "",
        "tags": "my bookings",
        "parameters": [
            {
                "name": "booking_id",
                "in": "path",
                "required": false,
                "type": "integer"
            }
        ],
        "responses": {
            "default": {
                "description": ""
            }
        },
        "requestBody": {
            "description": "",
            "content": {
                "application/json": {
                    "schema": {
                        "type": "object",
                        "properties": {
                            "reason": {
                                "type": "string",
                                "example": "Reason"
                            }
                        },
                        "required": [
                            "reason"
                        ]
                    }
                }
            }
        },
        "deprecated": false
    },
    {
        "id": "fdbe95dd413cfef8",
        "type": "swagger-doc",
        "summary": "",
        "description": "",
        "tags": "schedule",
        "parameters": [
            {
                "name": "room_id",
                "in": "query",
                "required": true,
                "type": "integer"
            },
            {
                "name": "start_time",
                "in": "query",
                "required": true,
                "type": "string"
            },
            {
                "name": "end_time",
                "in": "query",
                "required": true,
                "type": "string"
            }
        ],
        "responses": {
            "default": {
                "description": ""
            }
        },
        "deprecated": false
    },
    {
        "id": "de5d441597bd8d11",
        "type": "swagger-doc",
        "summary": "",
        "description": "",
        "tags": "audit logs",
        "parameters": [
            {
                "name": "room_name",
                "in": "query",
                "required": false,
                "type": "string"
            },
            {
                "name": "start_time",
                "in": "query",
                "required": false,
                "type": "string"
            },
            {
                "name": "username",
                "in": "query",
                "required": false,
                "type": "string"
            },
            {
                "name": "status",
                "in": "query",
                "required": false,
                "type": "string"
            }
        ],
        "responses": {
            "default": {
                "description": ""
            }
        },
        "deprecated": false
    },
    {
        "id": "4088509c69c94b07",
        "type": "http in",
        "z": "959654febd2675df",
        "g": "3e82cbd016ae10ad",
        "name": "catch_spa",
        "url": "/project/*",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "",
        "x": 380,
        "y": 220,
        "wires": [
            [
                "a6d77efa37086fdb"
            ]
        ]
    },
    {
        "id": "a6d77efa37086fdb",
        "type": "function",
        "z": "959654febd2675df",
        "g": "3e82cbd016ae10ad",
        "name": "filter_static_file",
        "func": "const mimeTypes = {\n    '.html': 'text/html',\n    '.css': 'text/css',\n    '.js': 'application/javascript',\n    '.json': 'application/json',\n    '.png': 'image/png',\n    '.jpg': 'image/jpeg',\n    '.svg': 'image/svg+xml',\n    '.ico': 'image/x-icon',\n    '.map': 'application/json',\n};\n\nconst userDir = global.get('userDir');\nconst activeProject = global.get('activeProject');\nconst baseDir = `${userDir}/uibuilder/project/build`;\n\nconst ext = msg.req.path.substring(msg.req.path.lastIndexOf('.')) || '';\nconst relativePath = msg.req.path.replace('/project', '');\n\n// if (msg.req.path.startsWith('/uibuilder/socket.io') || msg.req.path.startsWith('/uibuilder/vendor/')) {\n//     return null; // Let uibuilder handle this\n// }\n\n\nif (ext && Object.keys(mimeTypes).includes(ext)) {\n    msg.filename = baseDir + relativePath;\n    msg.headers = {\n        'Content-Type': mimeTypes[ext] || 'application/octet-stream'\n    };\n    return msg;\n}else{\n    msg.filename = baseDir + '/index.html';\n    msg.headers = {\n        'Content-Type': 'text/html'\n    };\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "path",
                "module": "path"
            }
        ],
        "x": 580,
        "y": 220,
        "wires": [
            [
                "414eeecd4b42d6c7"
            ]
        ]
    },
    {
        "id": "414eeecd4b42d6c7",
        "type": "file in",
        "z": "959654febd2675df",
        "g": "3e82cbd016ae10ad",
        "name": "read_index_file",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "allProps": false,
        "x": 780,
        "y": 220,
        "wires": [
            [
                "a871177578706ddd"
            ]
        ]
    },
    {
        "id": "a871177578706ddd",
        "type": "http response",
        "z": "959654febd2675df",
        "g": "3e82cbd016ae10ad",
        "name": "response_index_file",
        "statusCode": "",
        "headers": {},
        "x": 980,
        "y": 220,
        "wires": []
    },
    {
        "id": "abc94fd1618ad75d",
        "type": "uibuilder",
        "z": "6e18303f78d73c6e",
        "name": "",
        "topic": "",
        "url": "project",
        "okToGo": true,
        "fwdInMessages": false,
        "allowScripts": false,
        "allowStyles": false,
        "copyIndex": true,
        "templateFolder": "blank",
        "extTemplate": "",
        "showfolder": false,
        "reload": false,
        "sourceFolder": "build",
        "deployedVersion": "7.5.0",
        "showMsgUib": false,
        "title": "",
        "descr": "",
        "editurl": "",
        "x": 560,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "dc10e10d5ad5b29f",
        "type": "http in",
        "z": "6e18303f78d73c6e",
        "g": "e713e992ef10c6ef",
        "name": "POST /api/login",
        "url": "/api/login",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "f04d1c4ebddd8b38",
        "x": 180,
        "y": 200,
        "wires": [
            [
                "783009e76506f4ac"
            ]
        ]
    },
    {
        "id": "783009e76506f4ac",
        "type": "json",
        "z": "6e18303f78d73c6e",
        "g": "e713e992ef10c6ef",
        "name": "Parse JSON",
        "property": "payload",
        "action": "obj",
        "pretty": true,
        "x": 350,
        "y": 200,
        "wires": [
            [
                "7b8fe5c856099f49"
            ]
        ]
    },
    {
        "id": "1fede23e0ea5f9e5",
        "type": "debug",
        "z": "6e18303f78d73c6e",
        "g": "e713e992ef10c6ef",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 200,
        "wires": []
    },
    {
        "id": "7b8fe5c856099f49",
        "type": "function",
        "z": "6e18303f78d73c6e",
        "g": "e713e992ef10c6ef",
        "name": "build_query",
        "func": "const { username, password } = msg.payload || {};\nnode.log(username + password);\nif (!username || !password) {\n    msg.statusCode = 400;\n    msg.payload = {\n        ok: false,\n        message: \"Missing username or password\"\n    }\n    return [null, msg]\n}\nmsg.payload = [username];\nmsg.topic = \"SELECT u.user_id, u.username, u.password_hash, r.role_name FROM users u JOIN roles r ON u.role_name = r.role_name WHERE u.username = ?\";\n\nmsg.pass = password\nreturn [msg, null];\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 360,
        "wires": [
            [
                "4d54edb4e492d2d9"
            ],
            [
                "4f5d4a1875df4d36"
            ]
        ]
    },
    {
        "id": "01e4e1b598319715",
        "type": "function",
        "z": "6e18303f78d73c6e",
        "g": "e713e992ef10c6ef",
        "name": "set_response",
        "func": "const user = msg.user;\nmsg.statusCode = 200;\nmsg.payload = {\n    ok: true,\n    message: \"Login successful\",\n    user: {\n        user_id: user.user_id,\n        username: user.username,\n        role: user.role_name\n    },\n    token: msg.token\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 220,
        "wires": [
            [
                "4f5d4a1875df4d36",
                "e09d9be90e6627e3"
            ]
        ]
    },
    {
        "id": "82d058830d4ceb1d",
        "type": "jwt sign",
        "z": "6e18303f78d73c6e",
        "g": "e713e992ef10c6ef",
        "name": "jwt_sign",
        "alg": "HS512",
        "exp": "84600000",
        "jwkurl": "",
        "jwkkid": "",
        "secret": "msg.secret",
        "key": "",
        "signvar": "payload",
        "storetoken": "token",
        "x": 1100,
        "y": 220,
        "wires": [
            [
                "01e4e1b598319715",
                "5c39b63a3ebb4a63"
            ]
        ]
    },
    {
        "id": "8aba317151570a38",
        "type": "bcrypt",
        "z": "6e18303f78d73c6e",
        "g": "e713e992ef10c6ef",
        "name": "",
        "action": "verify",
        "field": "pass",
        "hash": "pass_hash",
        "target": "payload",
        "assignment": "replace",
        "match": "match",
        "outputs": 1,
        "rounds": 10,
        "x": 780,
        "y": 300,
        "wires": [
            [
                "eaddd29ee67511e9",
                "6a6b7a242b437191"
            ]
        ]
    },
    {
        "id": "4d54edb4e492d2d9",
        "type": "mysql",
        "z": "6e18303f78d73c6e",
        "g": "e713e992ef10c6ef",
        "mydb": "443dca5366e7983c",
        "name": "mysql",
        "x": 450,
        "y": 300,
        "wires": [
            [
                "1fede23e0ea5f9e5",
                "5be9363c051a9fa6"
            ]
        ]
    },
    {
        "id": "5be9363c051a9fa6",
        "type": "function",
        "z": "6e18303f78d73c6e",
        "g": "e713e992ef10c6ef",
        "name": "handle_result",
        "func": "const rows = msg.payload || [];\nif (rows.length > 0) {\n    const user = rows[0];\n    const payload = {\n        user_id: user.user_id,\n        username: user.username,\n        role: user.role_name\n    };\n    \n\n    msg.payload = payload;\n    msg.secret = env.get('JWT_SECRET_KEY')\n    msg.user = user;\n    msg.pass_hash = user.password_hash;\n    return msg;\n} else {\n    msg.statusCode = 404,\n    msg.payload = { ok: false, message: \"User Not Found\" };\n    return msg;\n}\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 300,
        "wires": [
            [
                "8aba317151570a38"
            ]
        ]
    },
    {
        "id": "eaddd29ee67511e9",
        "type": "debug",
        "z": "6e18303f78d73c6e",
        "g": "e713e992ef10c6ef",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "match",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 320,
        "wires": []
    },
    {
        "id": "6a6b7a242b437191",
        "type": "switch",
        "z": "6e18303f78d73c6e",
        "g": "e713e992ef10c6ef",
        "name": "",
        "property": "match",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 950,
        "y": 240,
        "wires": [
            [
                "82d058830d4ceb1d"
            ],
            [
                "4e8df7b44bfdd9ed"
            ]
        ]
    },
    {
        "id": "6a97fe73e3dd47ea",
        "type": "catch",
        "z": "6e18303f78d73c6e",
        "g": "e713e992ef10c6ef",
        "name": "catch",
        "scope": "group",
        "uncaught": true,
        "x": 310,
        "y": 440,
        "wires": [
            [
                "e481ecfaed1e4a1d"
            ]
        ]
    },
    {
        "id": "e481ecfaed1e4a1d",
        "type": "function",
        "z": "6e18303f78d73c6e",
        "g": "e713e992ef10c6ef",
        "name": "function 1",
        "func": "msg.status = 500;\nmsg.payload = {\n    ok: false,\n    message: \"Internal Server Error\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 440,
        "wires": [
            [
                "4f5d4a1875df4d36"
            ]
        ]
    },
    {
        "id": "4e8df7b44bfdd9ed",
        "type": "function",
        "z": "6e18303f78d73c6e",
        "g": "e713e992ef10c6ef",
        "name": "handle_invalid_password",
        "func": "msg.statusCode = 401;\nmsg.payload = {\n    ok: false,\n    message: \"Invalid username or password\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 260,
        "wires": [
            [
                "4f5d4a1875df4d36"
            ]
        ]
    },
    {
        "id": "4f5d4a1875df4d36",
        "type": "http response",
        "z": "6e18303f78d73c6e",
        "g": "e713e992ef10c6ef",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1470,
        "y": 360,
        "wires": []
    },
    {
        "id": "e09d9be90e6627e3",
        "type": "debug",
        "z": "6e18303f78d73c6e",
        "g": "e713e992ef10c6ef",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 160,
        "wires": []
    },
    {
        "id": "5c39b63a3ebb4a63",
        "type": "debug",
        "z": "6e18303f78d73c6e",
        "g": "e713e992ef10c6ef",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "secret",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 160,
        "wires": []
    },
    {
        "id": "64b287a5cceee242",
        "type": "link in",
        "z": "6e18303f78d73c6e",
        "name": "trigger socket",
        "links": [
            "baa3d5f2eb79a531",
            "bc1d3039e6fec733",
            "d3135d685060af63"
        ],
        "x": 355,
        "y": 80,
        "wires": [
            [
                "abc94fd1618ad75d"
            ]
        ]
    },
    {
        "id": "7413f2ac899a2d03",
        "type": "catch",
        "z": "6e18303f78d73c6e",
        "g": "e713e992ef10c6ef",
        "name": "catch_jwt",
        "scope": [
            "82d058830d4ceb1d"
        ],
        "uncaught": false,
        "x": 320,
        "y": 500,
        "wires": [
            [
                "cf45316525946b18"
            ]
        ]
    },
    {
        "id": "cf45316525946b18",
        "type": "function",
        "z": "6e18303f78d73c6e",
        "g": "e713e992ef10c6ef",
        "name": "function 3",
        "func": "msg.status = 401;\nmsg.payload = {\n    ok: false,\n    message: \"Invalid or missing token!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 500,
        "wires": [
            [
                "4f5d4a1875df4d36"
            ]
        ]
    },
    {
        "id": "9fc4af25f225331b",
        "type": "http in",
        "z": "f6851f6212eb23ed",
        "g": "6f5a2056e6dbbb95",
        "name": "GET /api/facilities",
        "url": "/api/facilities",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "2a2c4ccdc9e7690a",
        "x": 140,
        "y": 180,
        "wires": [
            [
                "6ae2496922c5c06c"
            ]
        ]
    },
    {
        "id": "b6cab3c170a6933b",
        "type": "http response",
        "z": "f6851f6212eb23ed",
        "g": "6f5a2056e6dbbb95",
        "name": "response",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1420,
        "y": 260,
        "wires": []
    },
    {
        "id": "2e92d20fa8764e9d",
        "type": "mysql",
        "z": "f6851f6212eb23ed",
        "g": "6f5a2056e6dbbb95",
        "mydb": "443dca5366e7983c",
        "name": "mysql",
        "x": 970,
        "y": 180,
        "wires": [
            [
                "8b0fc36ec31dc06f"
            ]
        ]
    },
    {
        "id": "d8505e493d0cc0fe",
        "type": "function",
        "z": "f6851f6212eb23ed",
        "g": "6f5a2056e6dbbb95",
        "name": "build_query",
        "func": "msg.topic = \"SELECT * FROM facilities;\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 180,
        "wires": [
            [
                "2e92d20fa8764e9d"
            ]
        ]
    },
    {
        "id": "8b0fc36ec31dc06f",
        "type": "function",
        "z": "f6851f6212eb23ed",
        "g": "6f5a2056e6dbbb95",
        "name": "handle_result",
        "func": "const rows = msg.payload || [];\nif(rows.length > 0){\n    msg.statusCode = 200;\n    msg.payload = {\n        facilities: rows,\n        message: \"Get all facilities successfully!\"\n    }\n} else {\n    msg.statusCode = 404;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 180,
        "wires": [
            [
                "b6cab3c170a6933b"
            ]
        ]
    },
    {
        "id": "741871df92cd9a57",
        "type": "jwt verify",
        "z": "f6851f6212eb23ed",
        "g": "6f5a2056e6dbbb95",
        "name": "verify_jwt",
        "alg": [
            "HS512"
        ],
        "jwkurl": "",
        "secret": "msg.secret",
        "key": "",
        "signvar": "bearer",
        "storetoken": "token",
        "x": 500,
        "y": 180,
        "wires": [
            [
                "d8505e493d0cc0fe"
            ]
        ]
    },
    {
        "id": "6ae2496922c5c06c",
        "type": "function",
        "z": "f6851f6212eb23ed",
        "g": "6f5a2056e6dbbb95",
        "name": "get_secret_key",
        "func": "msg.secret = env.get('JWT_SECRET_KEY')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 180,
        "wires": [
            [
                "741871df92cd9a57"
            ]
        ]
    },
    {
        "id": "199bf403f409f890",
        "type": "function",
        "z": "f6851f6212eb23ed",
        "g": "6f5a2056e6dbbb95",
        "name": "handle_unhandled_errors",
        "func": "msg.statusCode = 401;\nmsg.payload = {\n    ok: false,\n    message: \"Invalid token!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 360,
        "wires": [
            [
                "b6cab3c170a6933b"
            ]
        ]
    },
    {
        "id": "aa67d135e210cf0d",
        "type": "catch",
        "z": "f6851f6212eb23ed",
        "g": "6f5a2056e6dbbb95",
        "name": "catch",
        "scope": "group",
        "uncaught": true,
        "x": 290,
        "y": 360,
        "wires": [
            [
                "199bf403f409f890"
            ]
        ]
    },
    {
        "id": "87c9e869436eec69",
        "type": "catch",
        "z": "f6851f6212eb23ed",
        "g": "6f5a2056e6dbbb95",
        "name": "catch_jwt",
        "scope": [
            "741871df92cd9a57"
        ],
        "uncaught": false,
        "x": 280,
        "y": 280,
        "wires": [
            [
                "81250eb6303cd52a"
            ]
        ]
    },
    {
        "id": "81250eb6303cd52a",
        "type": "function",
        "z": "f6851f6212eb23ed",
        "g": "6f5a2056e6dbbb95",
        "name": "handle_invalid_token",
        "func": "msg.statusCode = 401;\nmsg.payload = {\n    message: \"Invalid or missing token!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 280,
        "wires": [
            [
                "b6cab3c170a6933b"
            ]
        ]
    },
    {
        "id": "cbc88d6992fd6244",
        "type": "http in",
        "z": "37dd95d269875e4a",
        "g": "aa1e98539aa1c396",
        "name": "GET /api/rooms",
        "url": "/api/rooms",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "51a89dca420ac4d8",
        "x": 180,
        "y": 60,
        "wires": [
            [
                "f4503f000a8c8298"
            ]
        ]
    },
    {
        "id": "8c40e70770102473",
        "type": "http response",
        "z": "37dd95d269875e4a",
        "g": "aa1e98539aa1c396",
        "name": "response",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1460,
        "y": 140,
        "wires": []
    },
    {
        "id": "6515c6ccbe020aec",
        "type": "mysql",
        "z": "37dd95d269875e4a",
        "g": "aa1e98539aa1c396",
        "mydb": "443dca5366e7983c",
        "name": "mysql",
        "x": 1010,
        "y": 60,
        "wires": [
            [
                "aba4e32da9bcb3fb"
            ]
        ]
    },
    {
        "id": "7fa7b4b75a06dbd0",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "aa1e98539aa1c396",
        "name": "build_query",
        "func": "const filters = msg.req.query || {};\n\nlet sql = `\n  SELECT \n    r.room_id,\n    r.room_name AS name,\n    r.capacity,\n    r.location,\n    r.is_deleted,\n    GROUP_CONCAT(DISTINCT CONCAT(f.facility_id, ':', f.name) SEPARATOR ',') AS facilities\n  FROM rooms r\n  LEFT JOIN room_facilities rf ON r.room_id = rf.room_id\n  LEFT JOIN facilities f ON rf.facility_id = f.facility_id\n  WHERE 1=1\n`;\n\nlet params = [];\nlet countParams = [];\nlet conditions = [];\n\nif (filters.name && filters.name.trim()) {\n  conditions.push('r.room_name LIKE ?');\n  params.push(`%${filters.name.trim()}%`);\n  countParams.push(`%${filters.name.trim()}%`);\n}\n\nif (filters.location && filters.location.trim()) {\n  conditions.push('r.location LIKE ?');\n  params.push(`%${filters.location.trim()}%`);\n  countParams.push(`%${filters.location.trim()}%`);\n}\n\nif (filters.min_capacity && !isNaN(parseInt(filters.min_capacity, 10))) {\n  conditions.push('r.capacity >= ?');\n  params.push(parseInt(filters.min_capacity, 10));\n  countParams.push(parseInt(filters.min_capacity, 10));\n}\n\nif (filters.facility_id && !isNaN(parseInt(filters.facility_id, 10))) {\n  conditions.push(`\n    r.room_id IN (\n      SELECT rf.room_id\n      FROM room_facilities rf\n      WHERE rf.facility_id = ?\n    )\n  `);\n  params.push(parseInt(filters.facility_id, 10));\n}\n\n\nif (conditions.length > 0) {\n  sql += ' AND ' + conditions.join(' AND ');\n}\n\nsql += ' GROUP BY r.room_id';\n\nsql += ' ORDER BY r.room_name ASC';\n\nif (filters.limit && !isNaN(parseInt(filters.limit, 10))) {\n  sql += ' LIMIT ?';\n  params.push(parseInt(filters.limit, 10));\n}\nif (filters.offset && !isNaN(parseInt(filters.offset, 10))) {\n  sql += ' OFFSET ?';\n  params.push(parseInt(filters.offset, 10));\n}\n\nconst countSql = `\n  SELECT COUNT(DISTINCT r.room_id) AS total_count\n  FROM rooms r\n  LEFT JOIN room_facilities rf ON r.room_id = rf.room_id\n  LEFT JOIN facilities f ON rf.facility_id = f.facility_id\n  WHERE 1=1\n  ${conditions.length > 0 ? ' AND ' + conditions.join(' AND ') : ''}\n`;\n\nif (filters.facility_id && !isNaN(parseInt(filters.facility_id, 10))) {\n  countParams.push(parseInt(filters.facility_id, 10));\n}\n\nmsg.topic = `${countSql};${sql}`;\nmsg.payload = [...countParams, ...params];\n\n// Debug\nnode.warn(`Filters: ${JSON.stringify(filters)}`);\nnode.warn(`Main SQL: ${sql}`);\nnode.warn(`Count SQL: ${countSql}`);\nnode.warn(`Count Params: ${JSON.stringify(countParams)}`);\nnode.warn(`Main Params: ${JSON.stringify(params)}`);\nnode.warn(`Total Params: ${JSON.stringify(msg.payload)}`);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 60,
        "wires": [
            [
                "6515c6ccbe020aec"
            ]
        ]
    },
    {
        "id": "aba4e32da9bcb3fb",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "aa1e98539aa1c396",
        "name": "handle_result",
        "func": "// Input: msg.payload = [[countResult], [mainResult]]\nconst [countResult, mainResult] = msg.payload || [[], []];\n\n// Parse facilities from GROUP_CONCAT\nconst rooms = mainResult.map(row => ({\n    room_id: row.room_id,\n    name: row.name,\n    capacity: row.capacity,\n    location: row.location,\n    is_deleted: row.is_deleted,\n    facilities: row.facilities ? row.facilities.split(',').map(f => {\n        const [id, name] = f.split(':');\n        return { facility_id: parseInt(id, 10), name };\n    }) : []\n}));\n\n// Format response\nmsg.payload = {\n    result: rooms,\n    total_count: countResult[0]?.total_count || 0\n};\n\n// Debug\nnode.warn(`Result rows: ${JSON.stringify(rooms)}`);\nnode.warn(`Total count: ${countResult[0]?.total_count || 0}`);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 60,
        "wires": [
            [
                "8c40e70770102473"
            ]
        ]
    },
    {
        "id": "69be1a66d4cf79b6",
        "type": "jwt verify",
        "z": "37dd95d269875e4a",
        "g": "aa1e98539aa1c396",
        "name": "verify_jwt",
        "alg": [
            "HS512"
        ],
        "jwkurl": "",
        "secret": "msg.secret",
        "key": "",
        "signvar": "bearer",
        "storetoken": "token",
        "x": 540,
        "y": 60,
        "wires": [
            [
                "1fda12a0f63cfad1"
            ]
        ]
    },
    {
        "id": "f4503f000a8c8298",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "aa1e98539aa1c396",
        "name": "get_secret_key",
        "func": "msg.secret = env.get('JWT_SECRET_KEY')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 60,
        "wires": [
            [
                "69be1a66d4cf79b6"
            ]
        ]
    },
    {
        "id": "1fda12a0f63cfad1",
        "type": "role-check",
        "z": "37dd95d269875e4a",
        "g": "aa1e98539aa1c396",
        "name": "role_check",
        "requiredRole": "ADMIN",
        "x": 710,
        "y": 140,
        "wires": [
            [
                "7fa7b4b75a06dbd0"
            ],
            [
                "8c40e70770102473"
            ]
        ]
    },
    {
        "id": "7817a703d1be77aa",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "aa1e98539aa1c396",
        "name": "handle_invalid_token",
        "func": "msg.statusCode = 401;\nmsg.payload = {\n    ok: false,\n    message: \"Invalid or missing token!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 240,
        "wires": [
            [
                "8c40e70770102473"
            ]
        ]
    },
    {
        "id": "464f66952bdab47e",
        "type": "catch",
        "z": "37dd95d269875e4a",
        "g": "aa1e98539aa1c396",
        "name": "catch",
        "scope": [
            "69be1a66d4cf79b6",
            "1fda12a0f63cfad1"
        ],
        "uncaught": false,
        "x": 330,
        "y": 240,
        "wires": [
            [
                "7817a703d1be77aa"
            ]
        ]
    },
    {
        "id": "cd333c9b6c4cdda9",
        "type": "http in",
        "z": "37dd95d269875e4a",
        "g": "43e2605169538c26",
        "name": "POST /api/rooms",
        "url": "/api/rooms",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "626d3e02856c1e8d",
        "x": 160,
        "y": 380,
        "wires": [
            [
                "9c0d4d10d5da0824"
            ]
        ]
    },
    {
        "id": "b2db5fd42dcc0f04",
        "type": "http response",
        "z": "37dd95d269875e4a",
        "g": "43e2605169538c26",
        "name": "response",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1500,
        "y": 460,
        "wires": []
    },
    {
        "id": "ca54e389846ed556",
        "type": "mysql",
        "z": "37dd95d269875e4a",
        "g": "43e2605169538c26",
        "mydb": "443dca5366e7983c",
        "name": "mysql",
        "x": 1070,
        "y": 380,
        "wires": [
            [
                "4387afda2196ac5e"
            ]
        ]
    },
    {
        "id": "9e8a701f796ea424",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "43e2605169538c26",
        "name": "build_query",
        "func": "const payload = msg.payload || {};\n\nif (!payload.name || !payload.capacity || !payload.location || payload.facility_ids.length == 0) {\n  msg.statusCode = 400;\n  msg.payload = { \n    ok: false,\n    message: 'Missing required fields: name, capacity, or location' };\n  return [null, msg];\n}\n\nlet sql = `\n  INSERT INTO rooms (room_name, capacity, location, is_deleted)\n  VALUES (?, ?, ?, 0);\n`;\nlet params = [payload.name.trim(), parseInt(payload.capacity, 10), payload.location.trim()];\n\nlet facilitySql = '';\nlet facilityParams = [];\nif (Array.isArray(payload.facility_ids) && payload.facility_ids.length > 0) {\n  const validFacilityIds = payload.facility_ids.filter(id => !isNaN(parseInt(id, 10)));\n  if (validFacilityIds.length > 0) {\n    facilitySql = validFacilityIds.map(() => `\n      INSERT INTO room_facilities (room_id, facility_id)\n      VALUES (LAST_INSERT_ID(), ?);\n    `).join('');\n    facilityParams = validFacilityIds.map(id => parseInt(id, 10));\n  }\n}\n\nmsg.topic = `\n  START TRANSACTION;\n  ${sql}\n  ${facilitySql}\n  COMMIT;\n  ROLLBACK;\n`;\nmsg.payload = [...params, ...facilityParams];\n\n// Debug\nnode.warn(`Payload: ${JSON.stringify(payload)}`);\nnode.warn(`SQL: ${msg.topic}`);\nnode.warn(`Params: ${JSON.stringify(msg.payload)}`);\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 420,
        "wires": [
            [
                "ca54e389846ed556"
            ],
            [
                "b2db5fd42dcc0f04"
            ]
        ]
    },
    {
        "id": "4387afda2196ac5e",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "43e2605169538c26",
        "name": "handle_result",
        "func": "const results = msg.payload || [];\n\nconst roomResult = results[1] || {};\nif (!roomResult.insertId || roomResult.affectedRows === 0) {\n    msg.statusCode = 400;\n    msg.payload = {\n        ok: false,\n        message: 'Failed to create room'\n    };\n    return msg;\n}\n\n\n// Format success response\nmsg.statusCode = 201;\nmsg.payload = {\n    ok: true,\n    message: 'Room created successfully',\n    result: roomResult.affectedRows\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 380,
        "wires": [
            [
                "b2db5fd42dcc0f04"
            ]
        ]
    },
    {
        "id": "22d0dc9c70904d93",
        "type": "jwt verify",
        "z": "37dd95d269875e4a",
        "g": "43e2605169538c26",
        "name": "verify_jwt",
        "alg": [
            "HS512"
        ],
        "jwkurl": "",
        "secret": "msg.secret",
        "key": "",
        "signvar": "bearer",
        "storetoken": "token",
        "x": 400,
        "y": 460,
        "wires": [
            [
                "96b0ad5d6251979a"
            ]
        ]
    },
    {
        "id": "d1e2eeb3dc8a7baf",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "43e2605169538c26",
        "name": "get_secret_key",
        "func": "msg.secret = env.get('JWT_SECRET_KEY')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 460,
        "wires": [
            [
                "22d0dc9c70904d93"
            ]
        ]
    },
    {
        "id": "96b0ad5d6251979a",
        "type": "role-check",
        "z": "37dd95d269875e4a",
        "g": "43e2605169538c26",
        "name": "role_check",
        "requiredRole": "ADMIN",
        "x": 550,
        "y": 460,
        "wires": [
            [
                "9e8a701f796ea424"
            ],
            [
                "b2db5fd42dcc0f04"
            ]
        ]
    },
    {
        "id": "d69a2c26cc9f11f4",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "43e2605169538c26",
        "name": "handle_invalid_token",
        "func": "msg.statusCode = 401;\nmsg.payload = {\n    ok: false,\n    message: \"Invalid or missing token!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 560,
        "wires": [
            [
                "b2db5fd42dcc0f04"
            ]
        ]
    },
    {
        "id": "f4a6b7abba1b853d",
        "type": "catch",
        "z": "37dd95d269875e4a",
        "g": "43e2605169538c26",
        "name": "catch",
        "scope": [
            "22d0dc9c70904d93",
            "96b0ad5d6251979a"
        ],
        "uncaught": false,
        "x": 390,
        "y": 560,
        "wires": [
            [
                "d69a2c26cc9f11f4"
            ]
        ]
    },
    {
        "id": "9c0d4d10d5da0824",
        "type": "json",
        "z": "37dd95d269875e4a",
        "g": "43e2605169538c26",
        "name": "parse_object",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 330,
        "y": 380,
        "wires": [
            [
                "d1e2eeb3dc8a7baf"
            ]
        ]
    },
    {
        "id": "8f6dc201eb39db7f",
        "type": "http response",
        "z": "37dd95d269875e4a",
        "g": "731b84d8bf335b59",
        "name": "response",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1500,
        "y": 1580,
        "wires": []
    },
    {
        "id": "6fc035c0c6e89a92",
        "type": "mysql",
        "z": "37dd95d269875e4a",
        "g": "731b84d8bf335b59",
        "mydb": "443dca5366e7983c",
        "name": "mysql",
        "x": 1050,
        "y": 1500,
        "wires": [
            [
                "a1ed93e7596aee60"
            ]
        ]
    },
    {
        "id": "006a159ba1dfc5a1",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "731b84d8bf335b59",
        "name": "build_query",
        "func": "const room_id = msg.req.params.room_id || {};\nconst id = parseInt(room_id, 10);\nmsg.topic = `\n  SELECT \n    r.room_id,\n    r.room_name AS name,\n    r.capacity,\n    r.location,\n    r.is_deleted,\n    GROUP_CONCAT(DISTINCT CONCAT(f.facility_id, ':', f.name) SEPARATOR ',') AS facilities\n  FROM rooms r\n  LEFT JOIN room_facilities rf ON r.room_id = rf.room_id\n  LEFT JOIN facilities f ON rf.facility_id = f.facility_id\n  WHERE r.room_id = ?\n  GROUP BY r.room_id\n  LIMIT 1;\n`;\n\nmsg.payload = [id];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1500,
        "wires": [
            [
                "6fc035c0c6e89a92"
            ]
        ]
    },
    {
        "id": "a1ed93e7596aee60",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "731b84d8bf335b59",
        "name": "handle_result",
        "func": "const result = msg.payload || [];\n\nif(result.length != 1){\n    msg.statusCode = 404;\n    msg.payload = {\n        ok: false,\n        message: \"Room not found\"\n    }\n}\nconst resultRoom = result[0];\nconst room = {\n    room_id: resultRoom.room_id,\n    name: resultRoom.name,\n    capacity: resultRoom.capacity,\n    location: resultRoom.location,\n    is_deleted: resultRoom.is_deleted,\n    facilities: resultRoom.facilities ? resultRoom.facilities.split(',').map(f => {\n        const [id, name] = f.split(':');\n        return { facility_id: parseInt(id, 10), name };\n    }) : []\n};\n\nmsg.payload = {\n    result: room,\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 1500,
        "wires": [
            [
                "8f6dc201eb39db7f"
            ]
        ]
    },
    {
        "id": "1dba4f40f290cccf",
        "type": "jwt verify",
        "z": "37dd95d269875e4a",
        "g": "731b84d8bf335b59",
        "name": "verify_jwt",
        "alg": [
            "HS512"
        ],
        "jwkurl": "",
        "secret": "msg.secret",
        "key": "",
        "signvar": "bearer",
        "storetoken": "token",
        "x": 580,
        "y": 1500,
        "wires": [
            [
                "961abd4227914836"
            ]
        ]
    },
    {
        "id": "21f2cec970bbfd1c",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "731b84d8bf335b59",
        "name": "get_secret_key",
        "func": "msg.secret = env.get('JWT_SECRET_KEY')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1500,
        "wires": [
            [
                "1dba4f40f290cccf"
            ]
        ]
    },
    {
        "id": "961abd4227914836",
        "type": "role-check",
        "z": "37dd95d269875e4a",
        "g": "731b84d8bf335b59",
        "name": "role_check",
        "requiredRole": "ADMIN",
        "x": 750,
        "y": 1580,
        "wires": [
            [
                "006a159ba1dfc5a1"
            ],
            [
                "8f6dc201eb39db7f"
            ]
        ]
    },
    {
        "id": "5d94436a08194e41",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "731b84d8bf335b59",
        "name": "handle_invalid_token",
        "func": "msg.statusCode = 401;\nmsg.payload = {\n    ok: false,\n    message: \"Invalid or missing token!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1680,
        "wires": [
            [
                "8f6dc201eb39db7f"
            ]
        ]
    },
    {
        "id": "8e3fbc7cd8b9157c",
        "type": "catch",
        "z": "37dd95d269875e4a",
        "g": "731b84d8bf335b59",
        "name": "catch",
        "scope": [
            "1dba4f40f290cccf",
            "961abd4227914836"
        ],
        "uncaught": false,
        "x": 370,
        "y": 1680,
        "wires": [
            [
                "5d94436a08194e41"
            ]
        ]
    },
    {
        "id": "3c078bd0c5d8df5f",
        "type": "http response",
        "z": "37dd95d269875e4a",
        "g": "bddb83f6550c1c97",
        "name": "response",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1520,
        "y": 780,
        "wires": []
    },
    {
        "id": "1bbf582482b68d30",
        "type": "mysql",
        "z": "37dd95d269875e4a",
        "g": "bddb83f6550c1c97",
        "mydb": "443dca5366e7983c",
        "name": "mysql",
        "x": 1090,
        "y": 700,
        "wires": [
            [
                "28385584a48e4371"
            ]
        ]
    },
    {
        "id": "28385584a48e4371",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "bddb83f6550c1c97",
        "name": "handle_result",
        "func": "const results = msg.payload || [];\n\nconst existenceResult = results[0] || [];\nif (!existenceResult || existenceResult.length === 0) {\n    msg.statusCode = 404;\n    msg.payload = {\n        ok: false,\n        message: 'Room not found or already deleted'\n    };\n    return msg;\n}\n\nconst roomUpdateResult = results[1] || {};\nif (roomUpdateResult.affectedRows === 0) {\n    msg.statusCode = 400;\n    msg.payload = {\n        ok: false,\n        message: 'Failed to update room'\n    };\n    return msg;\n}\n\nmsg.statusCode = 200;\nmsg.payload = {\n    ok: true,\n    message: 'Room updated successfully',\n    result: roomUpdateResult.affectedRows\n};\n\nnode.warn(`Update Result: ${JSON.stringify(msg.payload)}`);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 700,
        "wires": [
            [
                "3c078bd0c5d8df5f"
            ]
        ]
    },
    {
        "id": "06f562fde793b236",
        "type": "jwt verify",
        "z": "37dd95d269875e4a",
        "g": "bddb83f6550c1c97",
        "name": "verify_jwt",
        "alg": [
            "HS512"
        ],
        "jwkurl": "",
        "secret": "msg.secret",
        "key": "",
        "signvar": "bearer",
        "storetoken": "token",
        "x": 420,
        "y": 780,
        "wires": [
            [
                "ecfa6dbba57472fe"
            ]
        ]
    },
    {
        "id": "f762ee3ff328e7cd",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "bddb83f6550c1c97",
        "name": "get_secret_key",
        "func": "msg.secret = env.get('JWT_SECRET_KEY')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 780,
        "wires": [
            [
                "06f562fde793b236"
            ]
        ]
    },
    {
        "id": "ecfa6dbba57472fe",
        "type": "role-check",
        "z": "37dd95d269875e4a",
        "g": "bddb83f6550c1c97",
        "name": "role_check",
        "requiredRole": "ADMIN",
        "x": 570,
        "y": 780,
        "wires": [
            [
                "71c313ebddc64a42"
            ],
            [
                "3c078bd0c5d8df5f"
            ]
        ]
    },
    {
        "id": "5c63a40e03c4acc2",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "bddb83f6550c1c97",
        "name": "handle_invalid_token",
        "func": "msg.statusCode = 401;\nmsg.payload = {\n    ok: false,\n    message: \"Invalid or missing token!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 880,
        "wires": [
            [
                "3c078bd0c5d8df5f"
            ]
        ]
    },
    {
        "id": "7bb450e6dbd39a15",
        "type": "catch",
        "z": "37dd95d269875e4a",
        "g": "bddb83f6550c1c97",
        "name": "catch",
        "scope": [
            "06f562fde793b236",
            "ecfa6dbba57472fe"
        ],
        "uncaught": false,
        "x": 410,
        "y": 880,
        "wires": [
            [
                "5c63a40e03c4acc2"
            ]
        ]
    },
    {
        "id": "4201ab2e0ef62410",
        "type": "json",
        "z": "37dd95d269875e4a",
        "g": "bddb83f6550c1c97",
        "name": "parse_object",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 390,
        "y": 700,
        "wires": [
            [
                "f762ee3ff328e7cd"
            ]
        ]
    },
    {
        "id": "52aafdd0e13af00c",
        "type": "http in",
        "z": "37dd95d269875e4a",
        "g": "35b9f398219455c3",
        "name": "DELETE /api/rooms/:room_id",
        "url": "/api/rooms/:room_id",
        "method": "delete",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "001a5c8915d25374",
        "x": 180,
        "y": 1000,
        "wires": [
            [
                "c6d2166a6c5bb5be"
            ]
        ]
    },
    {
        "id": "9d7fd5160cb070dc",
        "type": "http response",
        "z": "37dd95d269875e4a",
        "g": "35b9f398219455c3",
        "name": "response",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1680,
        "y": 1100,
        "wires": []
    },
    {
        "id": "2e2f24f033fdb12b",
        "type": "mysql",
        "z": "37dd95d269875e4a",
        "g": "35b9f398219455c3",
        "mydb": "443dca5366e7983c",
        "name": "mysql",
        "x": 910,
        "y": 1020,
        "wires": [
            [
                "6c7516dbba02306e"
            ]
        ]
    },
    {
        "id": "43aa5890e3f9b088",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "35b9f398219455c3",
        "name": "build_query_validate",
        "func": "const room_id = msg.req?.params?.room_id;\n\nif (!room_id || isNaN(parseInt(room_id, 10))) {\n  msg.statusCode = 400;\n  msg.payload = {\n    ok: false,\n    message: 'Invalid or missing room_id'\n  };\n  return [null, msg];\n}\n\nlet sql = `\n  SELECT 1 FROM rooms WHERE room_id = ? AND is_deleted = 0;\n`;\nlet checkFutureBookingSql = `\n  SELECT 1 FROM bookings \n  WHERE room_id = ? \n  AND start_time > NOW()\n  AND status IN ('APPROVED', 'PENDING');\n`;\nlet params = [parseInt(room_id, 10)];\n\nmsg.topic = `${sql}${checkFutureBookingSql}`;\nmsg.payload = [...params, ...params];\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1040,
        "wires": [
            [
                "2e2f24f033fdb12b"
            ],
            [
                "9d7fd5160cb070dc"
            ]
        ]
    },
    {
        "id": "6c7516dbba02306e",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "35b9f398219455c3",
        "name": "handle_result",
        "func": "const results = msg.payload || [];\n\nnode.log(results)\n\nconst existenceResult = results[0] || [];\nif (!existenceResult || existenceResult.length === 0) {\n    msg.statusCode = 404;\n    msg.payload = {\n        ok: false,\n        message: 'Room not found or already deleted'\n    };\n    return [null,msg];\n}\n\nconst checkFutureBookingResult = results[1] || [];\nif (checkFutureBookingResult && checkFutureBookingResult.length > 0) {\n    msg.statusCode = 400;\n    msg.payload = {\n        ok: false,\n        message: 'Cannot delete room which has bookings in the future!'\n    };\n    return [null, msg];\n}\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1020,
        "wires": [
            [
                "3b5c8c025c7be344"
            ],
            [
                "9d7fd5160cb070dc"
            ]
        ]
    },
    {
        "id": "29f02c5b5fc0e4e3",
        "type": "jwt verify",
        "z": "37dd95d269875e4a",
        "g": "35b9f398219455c3",
        "name": "verify_jwt",
        "alg": [
            "HS512"
        ],
        "jwkurl": "",
        "secret": "msg.secret",
        "key": "",
        "signvar": "bearer",
        "storetoken": "token",
        "x": 360,
        "y": 1080,
        "wires": [
            [
                "8d87ea4ed40cebc3"
            ]
        ]
    },
    {
        "id": "c6d2166a6c5bb5be",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "35b9f398219455c3",
        "name": "get_secret_key",
        "func": "msg.secret = env.get('JWT_SECRET_KEY')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 1080,
        "wires": [
            [
                "29f02c5b5fc0e4e3"
            ]
        ]
    },
    {
        "id": "8d87ea4ed40cebc3",
        "type": "role-check",
        "z": "37dd95d269875e4a",
        "g": "35b9f398219455c3",
        "name": "role_check",
        "requiredRole": "ADMIN",
        "x": 510,
        "y": 1080,
        "wires": [
            [
                "43aa5890e3f9b088"
            ],
            [
                "9d7fd5160cb070dc"
            ]
        ]
    },
    {
        "id": "a1a916a8a5dd826e",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "35b9f398219455c3",
        "name": "handle_invalid_token",
        "func": "msg.statusCode = 401;\nmsg.payload = {\n    ok: false,\n    message: \"Invalid or missing token!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1180,
        "wires": [
            [
                "9d7fd5160cb070dc"
            ]
        ]
    },
    {
        "id": "8b7921bc8d96309c",
        "type": "catch",
        "z": "37dd95d269875e4a",
        "g": "35b9f398219455c3",
        "name": "catch",
        "scope": [
            "29f02c5b5fc0e4e3",
            "8d87ea4ed40cebc3"
        ],
        "uncaught": false,
        "x": 410,
        "y": 1180,
        "wires": [
            [
                "a1a916a8a5dd826e"
            ]
        ]
    },
    {
        "id": "71c313ebddc64a42",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "bddb83f6550c1c97",
        "name": "build_query",
        "func": "const payload = msg.payload || {};\nconst room_id = msg.req?.params?.room_id;\n\nif (!room_id || isNaN(parseInt(room_id, 10))) {\n  msg.statusCode = 400;\n  msg.payload = {\n    ok: false,\n    message: 'Invalid or missing room_id'\n  };\n  return [null, msg];\n}\n\nif (!payload.name?.trim() || !payload.capacity || !payload.location?.trim()) {\n  msg.statusCode = 400;\n  msg.payload = {\n    ok: false,\n    message: 'Missing required fields: name, capacity, or location'\n  };\n  return [null, msg];\n}\n\nlet sql = `\n  SELECT 1 FROM rooms WHERE room_id = ? AND is_deleted = 0;\n`;\nlet params = [parseInt(room_id, 10)];\n\nlet updateSql = `\n  UPDATE rooms \n  SET room_name = ?, capacity = ?, location = ?\n  WHERE room_id = ? AND is_deleted = 0;\n`;\nlet updateParams = [payload.name.trim(), parseInt(payload.capacity, 10), payload.location.trim(), parseInt(room_id, 10)];\n\nlet facilitySql = `\n  DELETE FROM room_facilities WHERE room_id = ?;\n`;\nlet facilityParams = [parseInt(room_id, 10)];\n\nif (Array.isArray(payload.facility_ids) && payload.facility_ids.length > 0) {\n  const validFacilityIds = payload.facility_ids.filter(id => !isNaN(parseInt(id, 10)));\n  if (validFacilityIds.length > 0) {\n    facilitySql += validFacilityIds.map(() => `\n      INSERT INTO room_facilities (room_id, facility_id)\n      VALUES (?, ?);\n    `).join('');\n    facilityParams.push(...validFacilityIds.flatMap(id => [parseInt(room_id, 10), parseInt(id, 10)]));\n  }\n}\n\nmsg.topic = sql + updateSql + facilitySql;\nmsg.payload = [...params, ...updateParams, ...facilityParams];\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 740,
        "wires": [
            [
                "1bbf582482b68d30"
            ],
            [
                "3c078bd0c5d8df5f"
            ]
        ]
    },
    {
        "id": "393a75a4de27840f",
        "type": "mysql",
        "z": "37dd95d269875e4a",
        "g": "35b9f398219455c3",
        "mydb": "443dca5366e7983c",
        "name": "mysql",
        "x": 1450,
        "y": 980,
        "wires": [
            [
                "c74f1b8ad4ca48b9"
            ]
        ]
    },
    {
        "id": "3b5c8c025c7be344",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "35b9f398219455c3",
        "name": "build_query_delete",
        "func": "const room_id = msg.req?.params?.room_id;\n\nlet deleteSql = `\n  UPDATE rooms \n  SET is_deleted = 1 \n  WHERE room_id = ? AND is_deleted = 0;\n`;\nlet deleteParams = [parseInt(room_id, 10)];\n\nmsg.topic = deleteSql;\nmsg.payload = [...deleteParams];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 1000,
        "wires": [
            [
                "393a75a4de27840f"
            ]
        ]
    },
    {
        "id": "c74f1b8ad4ca48b9",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "35b9f398219455c3",
        "name": "handle_result",
        "func": "const results = msg.payload || [];\n\nconst roomDeleteResult = results[0] || {};\nif (roomDeleteResult.affectedRows === 0) {\n    msg.statusCode = 400;\n    msg.payload = {\n        ok: false,\n        message: 'Failed to delete room'\n    };\n    return msg;\n}\n\nmsg.statusCode = 200;\nmsg.payload = {\n    ok: true,\n    message: 'Room updated successfully',\n    result: roomDeleteResult.affectedRows\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 980,
        "wires": [
            [
                "9d7fd5160cb070dc"
            ]
        ]
    },
    {
        "id": "1fc813a0b0ee5259",
        "type": "http response",
        "z": "37dd95d269875e4a",
        "g": "5313c9ea75a5b369",
        "name": "response",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1480,
        "y": 1860,
        "wires": []
    },
    {
        "id": "cd6dc72ddff52036",
        "type": "mysql",
        "z": "37dd95d269875e4a",
        "g": "5313c9ea75a5b369",
        "mydb": "443dca5366e7983c",
        "name": "mysql",
        "x": 950,
        "y": 1780,
        "wires": [
            [
                "ad28dc62dcbadec1"
            ]
        ]
    },
    {
        "id": "bdd6bce524b5de25",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "5313c9ea75a5b369",
        "name": "build_query",
        "func": "const filters = msg.req.query || {};\nlet start_time, end_time;\nif (!filters.start_time || !filters.end_time) {\n  msg.statusCode = 400;\n  msg.payload = { ok: false, message: 'start_time and end_time are required' };\n  return [null, msg];\n}\n\nstart_time = new Date(filters.start_time);\nend_time = new Date(filters.end_time);\n\nconst formatDateForSQL = (date) => {\n  const offset = 7 * 60;\n  const adjustedDate = new Date(date.getTime() + offset * 60 * 1000);\n  return adjustedDate.toISOString().replace('T', ' ').substring(0, 19);\n};\nconst sqlStartTime = formatDateForSQL(start_time);\nconst sqlEndTime = formatDateForSQL(end_time);\n\n// Main query for available rooms\nlet sql = `\n  SELECT\n  r.room_id,\n  r.room_name AS name,\n  r.capacity,\n  r.location,\n  GROUP_CONCAT(DISTINCT CONCAT(f.facility_id, ':', f.name) SEPARATOR ',') AS facilities\n  FROM rooms r\n  LEFT JOIN room_facilities rf ON r.room_id = rf.room_id\n  LEFT JOIN facilities f ON rf.facility_id = f.facility_id\n  WHERE r.is_deleted = 0\n  AND NOT EXISTS (\n    SELECT 1\n    FROM bookings b\n    WHERE b.room_id = r.room_id\n      AND b.status IN ('APPROVED', 'PENDING')\n      AND (\n        (b.start_time < ? AND b.end_time > ?) OR\n        (b.start_time >= ? AND b.start_time < ?) OR\n        (b.end_time > ? AND b.end_time <= ?)\n      )\n  )\n\n`;\n\n\nlet params = [\n  sqlEndTime,   // b.start_time < end_time\n  sqlStartTime, // b.end_time > start_time\n  sqlStartTime, // b.start_time >= start_time\n  sqlEndTime,   // b.start_time < end_time\n  sqlStartTime, // b.end_time > start_time\n  sqlEndTime    // b.end_time <= end_time\n];\nlet countParams = [...params];\nlet conditions = [];\n\nif (filters.min_capacity && !isNaN(parseInt(filters.min_capacity, 10))) {\n  conditions.push('r.capacity >= ?');\n  params.push(parseInt(filters.min_capacity, 10));\n  countParams.push(parseInt(filters.min_capacity, 10));\n}\n\nif (filters.facility_id && !isNaN(parseInt(filters.facility_id, 10))) {\n  conditions.push(`\n    r.room_id IN (\n      SELECT rf.room_id\n      FROM room_facilities rf\n      WHERE rf.facility_id = ?\n    )\n  `);\n  params.push(parseInt(filters.facility_id, 10));\n  countParams.push(parseInt(filters.facility_id, 10));\n}\n\n\nif (conditions.length > 0) {\n  sql += ' AND ' + conditions.join(' AND ');\n}\n\nsql += ' GROUP BY r.room_id';\nsql += ' ORDER BY r.room_name ASC';\n\nif (filters.limit && !isNaN(parseInt(filters.limit, 10))) {\n  sql += ' LIMIT ?';\n  params.push(parseInt(filters.limit, 10));\n}\nif (filters.offset && !isNaN(parseInt(filters.offset, 10))) {\n  sql += ' OFFSET ?';\n  params.push(parseInt(filters.offset, 10));\n}\n\nconst countSql = `\n  SELECT COUNT(DISTINCT r.room_id) AS total_count\n  FROM rooms r\n  LEFT JOIN room_facilities rf ON r.room_id = rf.room_id\n  LEFT JOIN facilities f ON rf.facility_id = f.facility_id\n  WHERE r.is_deleted = 0\n    AND NOT EXISTS (\n    SELECT 1\n    FROM bookings b\n    WHERE b.room_id = r.room_id\n      AND b.status IN ('APPROVED', 'PENDING')\n      AND (\n        (b.start_time < ? AND b.end_time > ?) OR\n        (b.start_time >= ? AND b.start_time < ?) OR\n        (b.end_time > ? AND b.end_time <= ?)\n      )\n    )\n    ${conditions.length > 0 ? ' AND ' + conditions.join(' AND ') : ''}\n`;\n\nmsg.topic = `${countSql};${sql}`;\nmsg.payload = [...countParams, ...params];\n\nnode.warn(`Filters: ${JSON.stringify(filters)}`);\nnode.warn(`Main SQL: ${sql}`);\nnode.warn(`Count SQL: ${countSql}`);\nnode.warn(`Count Params: ${JSON.stringify(countParams)}`);\nnode.warn(`Main Params: ${JSON.stringify(params)}`);\nnode.warn(`Total Params: ${JSON.stringify(msg.payload)}`);\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1820,
        "wires": [
            [
                "cd6dc72ddff52036"
            ],
            [
                "1fc813a0b0ee5259"
            ]
        ]
    },
    {
        "id": "ad28dc62dcbadec1",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "5313c9ea75a5b369",
        "name": "handle_result",
        "func": "const [countResult, mainResult] = msg.payload || [[], []];\n\nconst rooms = mainResult.map(row => ({\n    room_id: row.room_id,\n    name: row.name,\n    capacity: row.capacity,\n    location: row.location,\n    facilities: row.facilities ? row.facilities.split(',').map(f => {\n        const [id, name] = f.split(':');\n        return { facility_id: parseInt(id, 10), name };\n    }) : []\n}));\n\nmsg.payload = {\n    result: rooms,\n    total_count: countResult[0]?.total_count || 0\n};\n\nnode.warn(`Result rows: ${JSON.stringify(rooms)}`);\nnode.warn(`Total count: ${countResult[0]?.total_count || 0}`);\n\nreturn [msg, null];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 1780,
        "wires": [
            [
                "1fc813a0b0ee5259"
            ]
        ]
    },
    {
        "id": "d82a38baa1b33d29",
        "type": "jwt verify",
        "z": "37dd95d269875e4a",
        "g": "5313c9ea75a5b369",
        "name": "verify_jwt",
        "alg": [
            "HS512"
        ],
        "jwkurl": "",
        "secret": "msg.secret",
        "key": "",
        "signvar": "bearer",
        "storetoken": "token",
        "x": 620,
        "y": 1780,
        "wires": [
            [
                "bdd6bce524b5de25"
            ]
        ]
    },
    {
        "id": "edb201094d6a51c6",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "5313c9ea75a5b369",
        "name": "get_secret_key",
        "func": "msg.secret = env.get('JWT_SECRET_KEY')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1780,
        "wires": [
            [
                "d82a38baa1b33d29"
            ]
        ]
    },
    {
        "id": "dbeba861c30a2419",
        "type": "http response",
        "z": "37dd95d269875e4a",
        "g": "a3285fd9ae16509c",
        "name": "response",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1500,
        "y": 1360,
        "wires": []
    },
    {
        "id": "d6844f72e50939e2",
        "type": "mysql",
        "z": "37dd95d269875e4a",
        "g": "a3285fd9ae16509c",
        "mydb": "443dca5366e7983c",
        "name": "mysql",
        "x": 930,
        "y": 1280,
        "wires": [
            [
                "76845cf1372789ee"
            ]
        ]
    },
    {
        "id": "b0b0d10d4f67a1d6",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "a3285fd9ae16509c",
        "name": "build_query",
        "func": "msg.topic = `\n  SELECT \n    room_id,\n    room_name\n  FROM rooms\n  WHERE is_deleted = 0;\n`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1280,
        "wires": [
            [
                "d6844f72e50939e2"
            ]
        ]
    },
    {
        "id": "76845cf1372789ee",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "a3285fd9ae16509c",
        "name": "handle_result",
        "func": "const mainResult = msg.payload || [];\n\nconst rooms = mainResult.map(row => ({\n    room_id: row.room_id,\n    name: row.room_name,\n}));\n\nmsg.payload = {\n    ok: true,\n    result: rooms,\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 1280,
        "wires": [
            [
                "dbeba861c30a2419"
            ]
        ]
    },
    {
        "id": "a4770e1f4b82cba0",
        "type": "jwt verify",
        "z": "37dd95d269875e4a",
        "g": "a3285fd9ae16509c",
        "name": "verify_jwt",
        "alg": [
            "HS512"
        ],
        "jwkurl": "",
        "secret": "msg.secret",
        "key": "",
        "signvar": "bearer",
        "storetoken": "token",
        "x": 580,
        "y": 1280,
        "wires": [
            [
                "b0b0d10d4f67a1d6"
            ]
        ]
    },
    {
        "id": "9ddf9b61f1607ede",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "a3285fd9ae16509c",
        "name": "get_secret_key",
        "func": "msg.secret = env.get('JWT_SECRET_KEY')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1280,
        "wires": [
            [
                "a4770e1f4b82cba0"
            ]
        ]
    },
    {
        "id": "a383bacc60bb4a43",
        "type": "http in",
        "z": "37dd95d269875e4a",
        "g": "5313c9ea75a5b369",
        "name": "",
        "url": "/api/rooms/available",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "30f9eae301534002",
        "x": 230,
        "y": 1780,
        "wires": [
            [
                "edb201094d6a51c6"
            ]
        ]
    },
    {
        "id": "ef80f4c1229a47f0",
        "type": "http in",
        "z": "37dd95d269875e4a",
        "g": "a3285fd9ae16509c",
        "name": "",
        "url": "/api/rooms/active",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "1d44248fdfa89dbd",
        "x": 200,
        "y": 1280,
        "wires": [
            [
                "9ddf9b61f1607ede"
            ]
        ]
    },
    {
        "id": "bdd90f60c2ae5d17",
        "type": "http in",
        "z": "37dd95d269875e4a",
        "g": "731b84d8bf335b59",
        "name": "",
        "url": "/api/rooms/:room_id",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "15242996b35b834d",
        "x": 190,
        "y": 1500,
        "wires": [
            [
                "21f2cec970bbfd1c"
            ]
        ]
    },
    {
        "id": "3131bc55bb666978",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "a3285fd9ae16509c",
        "name": "handle_invalid_token",
        "func": "msg.statusCode = 401;\nmsg.payload = {\n    ok: false,\n    message: \"Invalid or missing token!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1360,
        "wires": [
            [
                "dbeba861c30a2419"
            ]
        ]
    },
    {
        "id": "21dba808b3974276",
        "type": "catch",
        "z": "37dd95d269875e4a",
        "g": "a3285fd9ae16509c",
        "name": "catch",
        "scope": [
            "a4770e1f4b82cba0"
        ],
        "uncaught": false,
        "x": 410,
        "y": 1360,
        "wires": [
            [
                "3131bc55bb666978"
            ]
        ]
    },
    {
        "id": "201417b0dcf73486",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "5313c9ea75a5b369",
        "name": "handle_invalid_token",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    ok: false,\n    message: \"Invalid or missing token!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1880,
        "wires": [
            [
                "1fc813a0b0ee5259"
            ]
        ]
    },
    {
        "id": "4997da6227298859",
        "type": "catch",
        "z": "37dd95d269875e4a",
        "g": "5313c9ea75a5b369",
        "name": "catch",
        "scope": [
            "d82a38baa1b33d29"
        ],
        "uncaught": false,
        "x": 530,
        "y": 1880,
        "wires": [
            [
                "201417b0dcf73486"
            ]
        ]
    },
    {
        "id": "03ca3a88533e851b",
        "type": "catch",
        "z": "37dd95d269875e4a",
        "g": "aa1e98539aa1c396",
        "name": "catch_unhandled_errors",
        "scope": "group",
        "uncaught": true,
        "x": 390,
        "y": 280,
        "wires": [
            [
                "63c845f4a7559173"
            ]
        ]
    },
    {
        "id": "63c845f4a7559173",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "aa1e98539aa1c396",
        "name": "handle_unhandled_errors",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    ok: false,\n    message: \"Internal Server Error\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 280,
        "wires": [
            [
                "8c40e70770102473"
            ]
        ]
    },
    {
        "id": "17707c68f920a188",
        "type": "catch",
        "z": "37dd95d269875e4a",
        "g": "43e2605169538c26",
        "name": "catch_unhandled_errors",
        "scope": "group",
        "uncaught": true,
        "x": 450,
        "y": 600,
        "wires": [
            [
                "a031401ecd3508de"
            ]
        ]
    },
    {
        "id": "a031401ecd3508de",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "43e2605169538c26",
        "name": "handle_unhandled_errors",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    ok: false,\n    message: \"Internal Server Error\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 600,
        "wires": [
            [
                "b2db5fd42dcc0f04"
            ]
        ]
    },
    {
        "id": "bd8f97fec7558845",
        "type": "catch",
        "z": "37dd95d269875e4a",
        "g": "bddb83f6550c1c97",
        "name": "catch_unhandled_errors",
        "scope": "group",
        "uncaught": true,
        "x": 470,
        "y": 840,
        "wires": [
            [
                "a9d70497e0f3ef64"
            ]
        ]
    },
    {
        "id": "a9d70497e0f3ef64",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "bddb83f6550c1c97",
        "name": "handle_unhandled_errors",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    ok: false,\n    message: \"Internal Server Error\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 840,
        "wires": [
            [
                "3c078bd0c5d8df5f"
            ]
        ]
    },
    {
        "id": "c0eaa6845aa0eafc",
        "type": "catch",
        "z": "37dd95d269875e4a",
        "g": "35b9f398219455c3",
        "name": "catch_unhandled_errors",
        "scope": "group",
        "uncaught": true,
        "x": 450,
        "y": 1140,
        "wires": [
            [
                "3fc5c22a589843b9"
            ]
        ]
    },
    {
        "id": "3fc5c22a589843b9",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "35b9f398219455c3",
        "name": "handle_unhandled_errors",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    ok: false,\n    message: \"Internal Server Error\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1140,
        "wires": [
            [
                "9d7fd5160cb070dc"
            ]
        ]
    },
    {
        "id": "9fa742df7df4ab9d",
        "type": "catch",
        "z": "37dd95d269875e4a",
        "g": "a3285fd9ae16509c",
        "name": "catch_unhandled_errors",
        "scope": "group",
        "uncaught": true,
        "x": 470,
        "y": 1400,
        "wires": [
            [
                "089d6f77a91f1151"
            ]
        ]
    },
    {
        "id": "089d6f77a91f1151",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "a3285fd9ae16509c",
        "name": "handle_unhandled_errors",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    ok: false,\n    message: \"Internal Server Error\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1400,
        "wires": [
            [
                "dbeba861c30a2419"
            ]
        ]
    },
    {
        "id": "c74226e5de532eb0",
        "type": "catch",
        "z": "37dd95d269875e4a",
        "g": "731b84d8bf335b59",
        "name": "catch_unhandled_errors",
        "scope": "group",
        "uncaught": true,
        "x": 430,
        "y": 1640,
        "wires": [
            [
                "db5c186592d2a610"
            ]
        ]
    },
    {
        "id": "db5c186592d2a610",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "731b84d8bf335b59",
        "name": "handle_unhandled_errors",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    ok: false,\n    message: \"Internal Server Error\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1640,
        "wires": [
            [
                "8f6dc201eb39db7f"
            ]
        ]
    },
    {
        "id": "c9b09c78d983da48",
        "type": "catch",
        "z": "37dd95d269875e4a",
        "g": "5313c9ea75a5b369",
        "name": "catch_unhandled_errors",
        "scope": "group",
        "uncaught": true,
        "x": 590,
        "y": 1920,
        "wires": [
            [
                "d38c116554111b17"
            ]
        ]
    },
    {
        "id": "d38c116554111b17",
        "type": "function",
        "z": "37dd95d269875e4a",
        "g": "5313c9ea75a5b369",
        "name": "handle_unhandled_errors",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    ok: false,\n    message: \"Internal Server Error\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1920,
        "wires": [
            [
                "1fc813a0b0ee5259"
            ]
        ]
    },
    {
        "id": "0d97231f6269a296",
        "type": "http in",
        "z": "37dd95d269875e4a",
        "g": "bddb83f6550c1c97",
        "name": "PUT /api/rooms/:room_id",
        "url": "/api/rooms/:room_id",
        "method": "put",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "b58757df08e36ba6",
        "x": 170,
        "y": 700,
        "wires": [
            [
                "4201ab2e0ef62410"
            ]
        ]
    },
    {
        "id": "f49e1e067a9d555c",
        "type": "http response",
        "z": "bd5efab3a54ad20c",
        "g": "504069dc06829e62",
        "name": "response",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1440,
        "y": 160,
        "wires": []
    },
    {
        "id": "747405ee397774a0",
        "type": "mysql",
        "z": "bd5efab3a54ad20c",
        "g": "504069dc06829e62",
        "mydb": "443dca5366e7983c",
        "name": "mysql",
        "x": 1090,
        "y": 80,
        "wires": [
            [
                "bb29fab178cd7225"
            ]
        ]
    },
    {
        "id": "892bcbf8f3e47265",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "504069dc06829e62",
        "name": "build_query",
        "func": "const filters = msg.req.query || {};\n\nlet sql = `\n  SELECT \n    b.booking_id,\n    b.title,\n    b.room_id,\n    r.room_name AS room_name,\n    b.user_id,\n    us.username,\n    b.start_time,\n    b.end_time,\n    b.status,\n    ur.username AS action_by,\n    b.action_at,\n    b.action_reason\n  FROM bookings b\n  INNER JOIN users us ON b.user_id = us.user_id\n  LEFT JOIN users ur ON b.action_by = ur.user_id\n  INNER JOIN rooms r ON b.room_id = r.room_id\n  WHERE 1=1\n`;\n\nlet params = [];\nlet countParams = [];\nlet conditions = [];\n\nif (filters.room_name && filters.room_name) {\n  conditions.push('r.room_name LIKE ?');\n  params.push(`%${filters.room_name}%`);\n  countParams.push(`%${filters.room_name.trim()}%`);\n}\n\nif (filters.start_time && filters.start_time) {\n  const start_time = new Date(filters.start_time);\n\n  if (isNaN(start_time.getTime())) {\n    msg.statusCode = 400;\n    msg.payload = {\n      ok: false,\n      message: 'Invalid booking start time or end time'\n    };\n    return [null, msg];\n  }\n\n  conditions.push('b.start_time >= ?');\n  params.push(filters.start_time);\n  countParams.push(filters.start_time);\n}\n\nif (filters.status && filters.status) {\n  conditions.push('b.status = ?');\n  params.push(filters.status.trim());\n  countParams.push(filters.status);\n}\n\nif (conditions.length > 0) {\n  sql += ' AND ' + conditions.join(' AND ');\n}\n\nsql += ' GROUP BY b.booking_id';\n\nsql += ' ORDER BY b.start_time DESC';\n\n// Pagination\nif (filters.limit && !isNaN(parseInt(filters.limit, 10))) {\n  sql += ' LIMIT ?';\n  params.push(parseInt(filters.limit, 10));\n}\nif (filters.offset && !isNaN(parseInt(filters.offset, 10))) {\n  sql += ' OFFSET ?';\n  params.push(parseInt(filters.offset, 10));\n}\n\n// Count query for total rows\nconst countSql = `\n  SELECT COUNT(DISTINCT b.booking_id) AS total_count\n  FROM bookings b\n  INNER JOIN users us ON b.user_id = us.user_id\n  LEFT JOIN users ur ON b.action_by = ur.user_id\n  INNER JOIN rooms r ON b.room_id = r.room_id\n  WHERE 1=1\n   ${conditions.length > 0 ? ' AND ' + conditions.join(' AND ') : ''}\n`;\n\n// Combine queries\nmsg.topic = `${countSql};${sql}`;\nmsg.payload = [...countParams, ...params];\n\n// Debug\nnode.warn(`Filters: ${JSON.stringify(filters)}`);\nnode.warn(`Main SQL: ${sql}`);\nnode.warn(`Count SQL: ${countSql}`);\nnode.warn(`Count Params: ${JSON.stringify(countParams)}`);\nnode.warn(`Main Params: ${JSON.stringify(params)}`);\nnode.warn(`Total Params: ${JSON.stringify(msg.payload)}`);\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840.1041717529297,
        "y": 90.09722900390625,
        "wires": [
            [
                "747405ee397774a0"
            ],
            [
                "f49e1e067a9d555c"
            ]
        ]
    },
    {
        "id": "bb29fab178cd7225",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "504069dc06829e62",
        "name": "handle_result",
        "func": "const [countResult, mainResult] = msg.payload || [[], []];\n\nconst bookings = mainResult.map(row => ({\n    booking_id: row.booking_id,\n    title: row.title,\n    room_id: row.room_id,\n    room_name: row.room_name,\n    user_id: row.user_id,\n    username: row.username,\n    start_time: row.start_time,\n    end_time: row.end_time,\n    status: row.status,\n    action_by: row.action_by,\n    action_at: row.action_at,\n    action_reason: row.action_reason\n}));\n\n// Format response\nmsg.payload = {\n    result: bookings,\n    total_count: countResult[0]?.total_count || 0\n};\n\n// Debug\nnode.warn(`Result rows: ${JSON.stringify(bookings)}`);\nnode.warn(`Total count: ${countResult[0]?.total_count || 0}`);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 80,
        "wires": [
            [
                "f49e1e067a9d555c"
            ]
        ]
    },
    {
        "id": "994f23d2cbc7df98",
        "type": "jwt verify",
        "z": "bd5efab3a54ad20c",
        "g": "504069dc06829e62",
        "name": "verify_jwt",
        "alg": [
            "HS512"
        ],
        "jwkurl": "",
        "secret": "msg.secret",
        "key": "",
        "signvar": "bearer",
        "storetoken": "token",
        "x": 520,
        "y": 80,
        "wires": [
            [
                "5e495eac96e9b125"
            ]
        ]
    },
    {
        "id": "f27de9691e262046",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "504069dc06829e62",
        "name": "get_secret_key",
        "func": "msg.secret = env.get('JWT_SECRET_KEY')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 80,
        "wires": [
            [
                "994f23d2cbc7df98"
            ]
        ]
    },
    {
        "id": "5e495eac96e9b125",
        "type": "role-check",
        "z": "bd5efab3a54ad20c",
        "g": "504069dc06829e62",
        "name": "role_check",
        "requiredRole": "ADMIN",
        "x": 700,
        "y": 160,
        "wires": [
            [
                "892bcbf8f3e47265"
            ],
            [
                "f49e1e067a9d555c"
            ]
        ]
    },
    {
        "id": "3e9a8064bd5699d9",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "504069dc06829e62",
        "name": "handle_invalid_token",
        "func": "msg.statusCode = 401;\nmsg.payload = {\n    ok: false,\n    message: \"Invalid or missing token!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 260,
        "wires": [
            [
                "f49e1e067a9d555c"
            ]
        ]
    },
    {
        "id": "5cebd9d63084d28f",
        "type": "catch",
        "z": "bd5efab3a54ad20c",
        "g": "504069dc06829e62",
        "name": "catch",
        "scope": [
            "994f23d2cbc7df98",
            "5e495eac96e9b125"
        ],
        "uncaught": false,
        "x": 300,
        "y": 260,
        "wires": [
            [
                "3e9a8064bd5699d9"
            ]
        ]
    },
    {
        "id": "a7a050dd92954768",
        "type": "http in",
        "z": "bd5efab3a54ad20c",
        "g": "224b4e5df0a4aff1",
        "name": "POST /api/bookings",
        "url": "/api/bookings",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "783314020467f92a",
        "x": 150,
        "y": 860,
        "wires": [
            [
                "a1e31873174aa9c6"
            ]
        ]
    },
    {
        "id": "c8276d90f5b27e27",
        "type": "http response",
        "z": "bd5efab3a54ad20c",
        "g": "224b4e5df0a4aff1",
        "name": "response",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1520,
        "y": 1000,
        "wires": []
    },
    {
        "id": "1f40028b455c3ee7",
        "type": "mysql",
        "z": "bd5efab3a54ad20c",
        "g": "224b4e5df0a4aff1",
        "mydb": "443dca5366e7983c",
        "name": "mysql",
        "x": 1030,
        "y": 900,
        "wires": [
            [
                "7fa30fa1e35c73bb"
            ]
        ]
    },
    {
        "id": "59619a6753f556ba",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "224b4e5df0a4aff1",
        "name": "build_query",
        "func": "const payload = msg.payload || {};\n\nif (!payload.room_id || !payload.title || !payload.start_time || !payload.end_time) {\n  msg.statusCode = 400;\n  msg.payload = { \n    ok: false,\n    message: 'Missing required fields! Please input all fields!' };\n  return [null, msg];\n}\n\nconst start_time = new Date(payload.start_time);\nconst end_time = new Date(payload.end_time);\nconst user_id  = msg.token.user_id;\n\nif (isNaN(start_time.getTime()) || isNaN(end_time.getTime())) {\n    msg.statusCode = 400;\n    msg.payload = {\n        ok: false,\n        message: 'Invalid booking start time or end time'\n    };\n    return [null, msg];\n}\n\nif (start_time > end_time) {\n    msg.statusCode = 400;\n    msg.payload = {\n        ok: false,\n        message: 'Booking start time cannot be after end time'\n    };\n    return [null, msg];\n}\n\nconst now = new Date();\nif (start_time < now) {\n    msg.statusCode = 400;\n    msg.payload = {\n        ok: false,\n        message: 'Booking start time cannot be in the past'\n    };\n    return [null, msg];\n}\n\nlet existSql =  `\n  SELECT 1 FROM bookings\n  WHERE room_id = ?\n  AND start_time < ? AND end_time > ?\n  \n`\nlet sql = `\n  INSERT INTO bookings (room_id, user_id, title, start_time, end_time)\n  VALUES (?, ?, ?, ?, ?);\n  SELECT booking_id, room_id, status, start_time, end_time FROM bookings WHERE booking_id = LAST_INSERT_ID();\n`;\n\nmsg.topic = `${existSql}; ${sql}`;\nmsg.payload = [\n  parseInt(payload.room_id, 10), end_time, start_time, // Parameters for existSql\n  parseInt(payload.room_id, 10), user_id, payload.title, start_time, end_time // Parameters for INSERT\n];\nnode.warn(sql);\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 980,
        "wires": [
            [
                "1f40028b455c3ee7"
            ],
            [
                "c8276d90f5b27e27"
            ]
        ]
    },
    {
        "id": "7fa30fa1e35c73bb",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "224b4e5df0a4aff1",
        "name": "handle_result",
        "func": "const results = msg.payload || [];\n\n\nconst existenceResult = results[0] || [];\nif (existenceResult && existenceResult.length !== 0) {\n    msg.statusCode = 400;\n    msg.payload = {\n        ok: false,\n        message: 'Room not available at this time'\n    };\n    return msg;\n}\n\n// Get booking result (INSERT metadata)\nconst bookingResult = results[1] || {};\nif (!bookingResult || !bookingResult.affectedRows) {\n    msg.statusCode = 400;\n    msg.payload = {\n        ok: false,\n        message: 'Failed to create booking'\n    };\n    return msg;\n}\n\n// Get the inserted row\nconst insertedRow = results[2] && results[2][0] ? results[2][0] : null;\nmsg.booking = insertedRow;\nmsg.statusCode = 201;\nmsg.payload = {\n    ok: true,\n    message: 'Booking created successfully',\n    result: insertedRow\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 900,
        "wires": [
            [
                "c8276d90f5b27e27",
                "d0689467ab220886",
                "831c579302862374"
            ]
        ]
    },
    {
        "id": "decb45220f690651",
        "type": "jwt verify",
        "z": "bd5efab3a54ad20c",
        "g": "224b4e5df0a4aff1",
        "name": "verify_jwt",
        "alg": [
            "HS512"
        ],
        "jwkurl": "",
        "secret": "msg.secret",
        "key": "",
        "signvar": "bearer",
        "storetoken": "token",
        "x": 720,
        "y": 980,
        "wires": [
            [
                "59619a6753f556ba"
            ]
        ]
    },
    {
        "id": "4c2d55d3b2ae811a",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "224b4e5df0a4aff1",
        "name": "get_secret_key",
        "func": "msg.secret = env.get('JWT_SECRET_KEY')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 980,
        "wires": [
            [
                "decb45220f690651"
            ]
        ]
    },
    {
        "id": "8f776e8533361a7b",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "224b4e5df0a4aff1",
        "name": "handle_invalid_token",
        "func": "msg.statusCode = 401;\nmsg.payload = {\n    ok: false,\n    message: \"Invalid or missing token!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1080,
        "wires": [
            [
                "c8276d90f5b27e27"
            ]
        ]
    },
    {
        "id": "488e589395636742",
        "type": "catch",
        "z": "bd5efab3a54ad20c",
        "g": "224b4e5df0a4aff1",
        "name": "catch",
        "scope": [
            "decb45220f690651"
        ],
        "uncaught": false,
        "x": 290,
        "y": 1080,
        "wires": [
            [
                "8f776e8533361a7b",
                "5452fc51071cf111"
            ]
        ]
    },
    {
        "id": "a1e31873174aa9c6",
        "type": "json",
        "z": "bd5efab3a54ad20c",
        "g": "224b4e5df0a4aff1",
        "name": "parse_object",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 350,
        "y": 980,
        "wires": [
            [
                "4c2d55d3b2ae811a"
            ]
        ]
    },
    {
        "id": "809f9cc877822a87",
        "type": "inject",
        "z": "bd5efab3a54ad20c",
        "g": "224b4e5df0a4aff1",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1280,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "d0689467ab220886",
        "type": "debug",
        "z": "bd5efab3a54ad20c",
        "g": "224b4e5df0a4aff1",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 960,
        "wires": []
    },
    {
        "id": "5452fc51071cf111",
        "type": "debug",
        "z": "bd5efab3a54ad20c",
        "g": "224b4e5df0a4aff1",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 1040,
        "wires": []
    },
    {
        "id": "b231190898d2d7f8",
        "type": "e-mail",
        "z": "bd5efab3a54ad20c",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": true,
        "name": "thaidqce171563@fpt.edu.vn",
        "dname": "test",
        "x": 550,
        "y": 2140,
        "wires": []
    },
    {
        "id": "212d72788d32feda",
        "type": "inject",
        "z": "bd5efab3a54ad20c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 2120,
        "wires": [
            [
                "735443c60466f071"
            ]
        ]
    },
    {
        "id": "735443c60466f071",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "name": "function 4",
        "func": "msg.payload = \"hihehee\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2140,
        "wires": [
            [
                "b231190898d2d7f8"
            ]
        ]
    },
    {
        "id": "831c579302862374",
        "type": "link out",
        "z": "bd5efab3a54ad20c",
        "g": "224b4e5df0a4aff1",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "20b6c09cf936e09b"
        ],
        "x": 1445,
        "y": 900,
        "wires": []
    },
    {
        "id": "32c3a07f9566f97e",
        "type": "http in",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "name": "POST /api/bookings/:booking_id/approve",
        "url": "/api/bookings/:booking_id/approve",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "9c31e44552665096",
        "x": 200,
        "y": 400,
        "wires": [
            [
                "9c33635f345b25e7",
                "c28d5c1b6a874681"
            ]
        ]
    },
    {
        "id": "c3998ac322473dce",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "name": "build_params",
        "func": "msg.booking_id = msg.req.params.booking_id || {};\nmsg.user_id = msg.token.user_id;\nmsg.topic = \"START TRANSACTION;\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 480,
        "wires": [
            [
                "2d9d91e3916d3cbc"
            ]
        ]
    },
    {
        "id": "10ebd13de58f4e3d",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "name": "check_booking_exists",
        "func": "msg.topic = \"SELECT * FROM bookings WHERE booking_id = ? AND status = 'PENDING'\";\nmsg.payload = [msg.booking_id];\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 400,
        "wires": [
            [
                "9db06c38f4ff3690"
            ]
        ]
    },
    {
        "id": "af7ba6e49f107e79",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "name": "verify_exist",
        "func": "const result = msg.payload;\nif (!Array.isArray(result) || result.length === 0) {\n    msg.topic = \"ROLLBACK;\";\n    msg.errorMsg = 'Booking not found or not pending';\n    return [null, msg]; // route to rollback\n}\n// continue to update\nmsg.topic = \"UPDATE bookings SET status='APPROVED', action_by=?, action_at=NOW() WHERE booking_id=? AND status='PENDING'\";\nmsg.payload = [msg.user_id, msg.booking_id];\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 540,
        "wires": [
            [
                "0fd3e7474f8a0f4a"
            ],
            [
                "c3edb91ea4864ce2"
            ]
        ]
    },
    {
        "id": "8892cfa1146e77aa",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "name": "verify_update",
        "func": "const result = msg.payload;\nif (!result || result.affectedRows === 0) {\n    msg.topic = \"ROLLBACK;\";\n    msg.errorMsg = 'Failed to update booking';\n    return [null, msg];\n}\nmsg.topic = \"INSERT INTO audit_logs (booking_id, action, action_by, action_at) VALUES (?, 'APPROVED', ?, NOW())\";\nmsg.payload = [msg.booking_id, msg.user_id];\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 520,
        "wires": [
            [
                "70926ee0c56f5289"
            ],
            [
                "c3edb91ea4864ce2"
            ]
        ]
    },
    {
        "id": "7f92e639274d0d44",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "name": "verify_insert_audit",
        "func": "const result = msg.payload;\nif (!result || !result.insertId) {\n    msg.topic = \"ROLLBACK;\";\n    msg.errorMsg = 'Failed to insert audit log';\n    return [null, msg];\n}\nmsg.topic = \"COMMIT;\";\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 480,
        "wires": [
            [
                "0c20f55bc978cdac"
            ],
            [
                "c3edb91ea4864ce2"
            ]
        ]
    },
    {
        "id": "f5dcfc7abed36e14",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "name": "select_booking_detail",
        "func": "msg.topic = `\nSELECT r.room_id, b.booking_id, r.room_name, b.start_time, b.end_time, u.user_id, b.status\nFROM bookings b \nJOIN rooms r ON b.room_id = r.room_id\nJOIN users u ON b.user_id = u.user_id\nWHERE b.booking_id = ?\nLIMIT 1;\n`;\nmsg.payload = [msg.booking_id];\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 420,
        "wires": [
            [
                "a325ed36b7a36cbd"
            ]
        ]
    },
    {
        "id": "c2df3858e6a8ac23",
        "type": "http response",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 2240,
        "y": 640,
        "wires": []
    },
    {
        "id": "7c9dd83c0d5efa4a",
        "type": "http response",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "name": "response_error",
        "statusCode": "400",
        "headers": {},
        "x": 2060,
        "y": 600,
        "wires": []
    },
    {
        "id": "2d9d91e3916d3cbc",
        "type": "mysql",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "mydb": "443dca5366e7983c",
        "name": "",
        "x": 740,
        "y": 400,
        "wires": [
            [
                "10ebd13de58f4e3d"
            ]
        ]
    },
    {
        "id": "9db06c38f4ff3690",
        "type": "mysql",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "mydb": "443dca5366e7983c",
        "name": "",
        "x": 1180,
        "y": 400,
        "wires": [
            [
                "af7ba6e49f107e79"
            ]
        ]
    },
    {
        "id": "0fd3e7474f8a0f4a",
        "type": "mysql",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "mydb": "443dca5366e7983c",
        "name": "",
        "x": 980,
        "y": 520,
        "wires": [
            [
                "8892cfa1146e77aa"
            ]
        ]
    },
    {
        "id": "c3edb91ea4864ce2",
        "type": "mysql",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "mydb": "443dca5366e7983c",
        "name": "",
        "x": 1560,
        "y": 540,
        "wires": [
            [
                "b1df615bc7d3d852"
            ]
        ]
    },
    {
        "id": "70926ee0c56f5289",
        "type": "mysql",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "mydb": "443dca5366e7983c",
        "name": "",
        "x": 1380,
        "y": 480,
        "wires": [
            [
                "7f92e639274d0d44"
            ]
        ]
    },
    {
        "id": "0c20f55bc978cdac",
        "type": "mysql",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "mydb": "443dca5366e7983c",
        "name": "",
        "x": 1600,
        "y": 420,
        "wires": [
            [
                "f5dcfc7abed36e14"
            ]
        ]
    },
    {
        "id": "a325ed36b7a36cbd",
        "type": "mysql",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "mydb": "443dca5366e7983c",
        "name": "",
        "x": 2040,
        "y": 420,
        "wires": [
            [
                "2876a7001beb3eb4"
            ]
        ]
    },
    {
        "id": "2876a7001beb3eb4",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "name": "handle_result",
        "func": "const result = msg.payload || [];\nconst selectObject = result[0];\n\nmsg.statusCode = 200;\nmsg.payload = {\n    ok: true,\n    message: 'Booking approved successfully',\n    result: selectObject\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2140,
        "y": 500,
        "wires": [
            [
                "c2df3858e6a8ac23",
                "753577e69d565b49"
            ]
        ]
    },
    {
        "id": "753577e69d565b49",
        "type": "link out",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "20b6c09cf936e09b",
            "83a70607a20416e0"
        ],
        "x": 2275,
        "y": 440,
        "wires": []
    },
    {
        "id": "bae75b83d0b38da1",
        "type": "jwt verify",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "name": "verify_jwt",
        "alg": [
            "HS512"
        ],
        "jwkurl": "",
        "secret": "msg.secret",
        "key": "",
        "signvar": "bearer",
        "storetoken": "token",
        "x": 200,
        "y": 600,
        "wires": [
            [
                "2fcd527e308e8ab4"
            ]
        ]
    },
    {
        "id": "c28d5c1b6a874681",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "name": "get_secret_key",
        "func": "msg.secret = env.get('JWT_SECRET_KEY')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 540,
        "wires": [
            [
                "bae75b83d0b38da1"
            ]
        ]
    },
    {
        "id": "2fcd527e308e8ab4",
        "type": "role-check",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "name": "role_check",
        "requiredRole": "ADMIN",
        "x": 350,
        "y": 600,
        "wires": [
            [
                "c3998ac322473dce"
            ],
            [
                "7c9dd83c0d5efa4a"
            ]
        ]
    },
    {
        "id": "4e89a1054bae3441",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "name": "handle_invalid_token",
        "func": "msg.statusCode = 401;\nmsg.payload = {\n    ok: false,\n    message: \"Invalid or missing token!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 660,
        "wires": [
            [
                "c2df3858e6a8ac23"
            ]
        ]
    },
    {
        "id": "2b36261bd517fbfe",
        "type": "catch",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "name": "catch",
        "scope": [
            "bae75b83d0b38da1"
        ],
        "uncaught": false,
        "x": 290,
        "y": 660,
        "wires": [
            [
                "4e89a1054bae3441"
            ]
        ]
    },
    {
        "id": "0924975e479915e9",
        "type": "catch",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "name": "catch_unhandled_errors",
        "scope": "group",
        "uncaught": true,
        "x": 350,
        "y": 720,
        "wires": [
            [
                "5b0d9a0e193a130f",
                "897273774df7fcfc"
            ]
        ]
    },
    {
        "id": "5b0d9a0e193a130f",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "name": "handle_unhandled_errors",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    ok: false,\n    message: \"Internal Server Error!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 720,
        "wires": [
            [
                "c2df3858e6a8ac23"
            ]
        ]
    },
    {
        "id": "6b3a733c2ea08eac",
        "type": "http in",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "name": "POST /api/bookings/:booking_id/reject",
        "url": "/api/bookings/:booking_id/reject",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "9d44b144c22a41cb",
        "x": 190,
        "y": 1220,
        "wires": [
            [
                "57ad84ef751037ef"
            ]
        ]
    },
    {
        "id": "4221a36a44d6f6b2",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "name": "build_params",
        "func": "// Parse booking_id and user_id from request\nconst body = msg.payload;\nmsg.booking_id = msg.req.params.booking_id || {};\nmsg.user_id = msg.token.user_id;\nmsg.reason = body.action_reason;\nmsg.topic = \"START TRANSACTION;\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1220,
        "wires": [
            [
                "65f70ae94a4f3ee9"
            ]
        ]
    },
    {
        "id": "072456cf4d64d623",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "name": "check_booking_exists",
        "func": "msg.topic = \"SELECT * FROM bookings WHERE booking_id = ? AND status = 'PENDING'\";\nmsg.payload = [msg.booking_id];\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1220,
        "wires": [
            [
                "74acc2b91641212c"
            ]
        ]
    },
    {
        "id": "37328f7790631f63",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "name": "verify_exist",
        "func": "const result = msg.payload;\nif (!Array.isArray(result) || result.length === 0) {\n    msg.topic = \"ROLLBACK;\";\n    msg.errorMsg = 'Booking not found or not pending';\n    return [null, msg]; // route to rollback\n}\n// continue to update\nmsg.topic = \"UPDATE bookings SET status='REJECTED', action_by=?, action_reason=?, action_at=NOW() WHERE booking_id=? AND status='PENDING'\";\nmsg.payload = [msg.user_id, msg.reason, msg.booking_id];\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1360,
        "wires": [
            [
                "84f863e44afdc3ee"
            ],
            [
                "267d99de9baea157"
            ]
        ]
    },
    {
        "id": "70ec3f479e767c50",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "name": "verify_update",
        "func": "const result = msg.payload;\nif (!result || result.affectedRows === 0) {\n    msg.topic = \"ROLLBACK;\";\n    msg.errorMsg = 'Failed to update booking';\n    return [null, msg];\n}\nmsg.topic = \"INSERT INTO audit_logs (booking_id, action, action_reason, action_by, action_at) VALUES (?, 'REJECTED', ?, ?, NOW())\";\nmsg.payload = [msg.booking_id, msg.reason, msg.user_id];\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 1320,
        "wires": [
            [
                "ee9894caac0ba38f"
            ],
            [
                "267d99de9baea157"
            ]
        ]
    },
    {
        "id": "bf942c56bf439f54",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "name": "verify_insert_audit",
        "func": "const result = msg.payload;\nif (!result || !result.insertId) {\n    msg.topic = \"ROLLBACK;\";\n    msg.errorMsg = 'Failed to insert audit log';\n    return [null, msg];\n}\nmsg.topic = \"COMMIT;\";\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 1300,
        "wires": [
            [
                "c2085e1b81e77e48"
            ],
            [
                "267d99de9baea157"
            ]
        ]
    },
    {
        "id": "70423602c900313d",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "name": "select_booking_detail",
        "func": "msg.topic = `\nSELECT r.room_id, b.booking_id, r.room_name, b.start_time, b.end_time, u.user_id, b.status\nFROM bookings b \nJOIN rooms r ON b.room_id = r.room_id\nJOIN users u ON b.user_id = u.user_id\nWHERE b.booking_id = ?\nLIMIT 1;\n`;\nmsg.payload = [msg.booking_id];\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 1240,
        "wires": [
            [
                "5fd7870f1b6ce1c1"
            ]
        ]
    },
    {
        "id": "af371fbaabf72056",
        "type": "http response",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 2240,
        "y": 1460,
        "wires": []
    },
    {
        "id": "83121f413b1f8062",
        "type": "http response",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "name": "response_error",
        "statusCode": "400",
        "headers": {},
        "x": 2020,
        "y": 1420,
        "wires": []
    },
    {
        "id": "65f70ae94a4f3ee9",
        "type": "mysql",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "mydb": "443dca5366e7983c",
        "name": "",
        "x": 740,
        "y": 1220,
        "wires": [
            [
                "072456cf4d64d623"
            ]
        ]
    },
    {
        "id": "74acc2b91641212c",
        "type": "mysql",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "mydb": "443dca5366e7983c",
        "name": "",
        "x": 620,
        "y": 1300,
        "wires": [
            [
                "37328f7790631f63"
            ]
        ]
    },
    {
        "id": "84f863e44afdc3ee",
        "type": "mysql",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "mydb": "443dca5366e7983c",
        "name": "",
        "x": 920,
        "y": 1320,
        "wires": [
            [
                "70ec3f479e767c50"
            ]
        ]
    },
    {
        "id": "267d99de9baea157",
        "type": "mysql",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "mydb": "443dca5366e7983c",
        "name": "",
        "x": 1500,
        "y": 1360,
        "wires": [
            [
                "47ae447451fd8118"
            ]
        ]
    },
    {
        "id": "ee9894caac0ba38f",
        "type": "mysql",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "mydb": "443dca5366e7983c",
        "name": "",
        "x": 1320,
        "y": 1280,
        "wires": [
            [
                "bf942c56bf439f54"
            ]
        ]
    },
    {
        "id": "c2085e1b81e77e48",
        "type": "mysql",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "mydb": "443dca5366e7983c",
        "name": "",
        "x": 1600,
        "y": 1240,
        "wires": [
            [
                "70423602c900313d"
            ]
        ]
    },
    {
        "id": "5fd7870f1b6ce1c1",
        "type": "mysql",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "mydb": "443dca5366e7983c",
        "name": "",
        "x": 2040,
        "y": 1240,
        "wires": [
            [
                "0d027e6f34732504"
            ]
        ]
    },
    {
        "id": "57ad84ef751037ef",
        "type": "json",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 130,
        "y": 1280,
        "wires": [
            [
                "bda614fed1997ad1"
            ]
        ]
    },
    {
        "id": "0d027e6f34732504",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "name": "handle_result",
        "func": "const result = msg.payload || [];\nconst selectObject = result[0];\n\nmsg.statusCode = 200;\nmsg.payload = {\n    ok: true,\n    message: 'Booking approved successfully',\n    result: selectObject\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2140,
        "y": 1320,
        "wires": [
            [
                "af371fbaabf72056",
                "d6a9ba42a3b788cc"
            ]
        ]
    },
    {
        "id": "d6a9ba42a3b788cc",
        "type": "link out",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "20b6c09cf936e09b",
            "83a70607a20416e0"
        ],
        "x": 2275,
        "y": 1260,
        "wires": []
    },
    {
        "id": "93b2a79b785357ed",
        "type": "jwt verify",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "name": "verify_jwt",
        "alg": [
            "HS512"
        ],
        "jwkurl": "",
        "secret": "msg.secret",
        "key": "",
        "signvar": "bearer",
        "storetoken": "token",
        "x": 320,
        "y": 1420,
        "wires": [
            [
                "a79ef35ef6bd60a6"
            ]
        ]
    },
    {
        "id": "bda614fed1997ad1",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "name": "get_secret_key",
        "func": "msg.secret = env.get('JWT_SECRET_KEY')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1420,
        "wires": [
            [
                "93b2a79b785357ed"
            ]
        ]
    },
    {
        "id": "a79ef35ef6bd60a6",
        "type": "role-check",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "name": "role_check",
        "requiredRole": "ADMIN",
        "x": 470,
        "y": 1420,
        "wires": [
            [
                "4221a36a44d6f6b2"
            ],
            [
                "83121f413b1f8062"
            ]
        ]
    },
    {
        "id": "fc5ea47cc62cf18c",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "name": "handle_invalid_token",
        "func": "msg.statusCode = 401;\nmsg.payload = {\n    ok: false,\n    message: \"Invalid or missing token!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1480,
        "wires": [
            [
                "af371fbaabf72056"
            ]
        ]
    },
    {
        "id": "e944b42d36dd1686",
        "type": "catch",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "name": "catch",
        "scope": [
            "93b2a79b785357ed"
        ],
        "uncaught": false,
        "x": 290,
        "y": 1480,
        "wires": [
            [
                "fc5ea47cc62cf18c"
            ]
        ]
    },
    {
        "id": "90fb6e79f160d504",
        "type": "catch",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "name": "catch_unhandled_errors",
        "scope": "group",
        "uncaught": true,
        "x": 350,
        "y": 1540,
        "wires": [
            [
                "2d1caa2cc7f191f9"
            ]
        ]
    },
    {
        "id": "2d1caa2cc7f191f9",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "name": "handle_unhandled_errors",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    ok: false,\n    message: \"Internal Server Error!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1540,
        "wires": [
            [
                "af371fbaabf72056"
            ]
        ]
    },
    {
        "id": "4e28f83077ad3c28",
        "type": "http in",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "name": "POST /api/bookings/:booking_id/cancel",
        "url": "/api/bookings/:booking_id/cancel",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "b3a53d07c5bede1b",
        "x": 190,
        "y": 1660,
        "wires": [
            [
                "fa5a8218cf6cd2ba"
            ]
        ]
    },
    {
        "id": "ef48bb785c4baeaf",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "name": "build_params",
        "func": "// Parse booking_id and user_id from request\nconst body = msg.payload;\nmsg.booking_id = msg.req.params.booking_id || {};\nmsg.user_id = msg.token.user_id;\nmsg.reason = body.action_reason;\nmsg.topic = \"START TRANSACTION;\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1660,
        "wires": [
            [
                "03cdf80309d00fdd"
            ]
        ]
    },
    {
        "id": "22cfcc851a1f1dcb",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "name": "check_booking_exists",
        "func": "msg.topic = \"SELECT * FROM bookings WHERE booking_id = ? AND status = 'APPROVED'\";\nmsg.payload = [msg.booking_id];\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1660,
        "wires": [
            [
                "f58c856ef93b8919"
            ]
        ]
    },
    {
        "id": "e1dfc631c7092deb",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "name": "verify_exist",
        "func": "const result = msg.payload;\nif (!Array.isArray(result) || result.length === 0) {\n    msg.topic = \"ROLLBACK;\";\n    msg.errorMsg = 'Booking not found or not pending';\n    return [null, msg]; // route to rollback\n}\n// continue to update\nmsg.topic = \"UPDATE bookings SET status='CANCELLED', action_by=?, action_reason=?, action_at=NOW() WHERE booking_id=? AND status='APPROVED'\";\nmsg.payload = [msg.user_id, msg.reason, msg.booking_id];\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1800,
        "wires": [
            [
                "e0fdbc9b53a37e07"
            ],
            [
                "338a5459c259ecb0"
            ]
        ]
    },
    {
        "id": "27c6ba67c509ae21",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "name": "verify_update",
        "func": "const result = msg.payload;\nif (!result || result.affectedRows === 0) {\n    msg.topic = \"ROLLBACK;\";\n    msg.errorMsg = 'Failed to update booking';\n    return [null, msg];\n}\nmsg.topic = \"INSERT INTO audit_logs (booking_id, action, action_reason, action_by, action_at) VALUES (?, 'CANCELLED', ?, ?, NOW())\";\nmsg.payload = [msg.booking_id, msg.reason, msg.user_id];\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 1760,
        "wires": [
            [
                "498f59dd1e610291"
            ],
            [
                "338a5459c259ecb0"
            ]
        ]
    },
    {
        "id": "e3c4ea068077a80f",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "name": "verify_insert_audit",
        "func": "const result = msg.payload;\nif (!result || !result.insertId) {\n    msg.topic = \"ROLLBACK;\";\n    msg.errorMsg = 'Failed to insert audit log';\n    return [null, msg];\n}\nmsg.topic = \"COMMIT;\";\nreturn [msg, null];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 1740,
        "wires": [
            [
                "6fa92bff013a605f"
            ],
            [
                "338a5459c259ecb0"
            ]
        ]
    },
    {
        "id": "6c8b7f203d7fad54",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "name": "select_booking_detail",
        "func": "msg.topic = `\nSELECT r.room_id, b.booking_id, r.room_name, b.start_time, b.end_time, u.user_id, b.status\nFROM bookings b \nJOIN rooms r ON b.room_id = r.room_id\nJOIN users u ON b.user_id = u.user_id\nWHERE b.booking_id = ?\nLIMIT 1;\n`;\nmsg.payload = [msg.booking_id];\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 1680,
        "wires": [
            [
                "ebbbc1f7d5bba450"
            ]
        ]
    },
    {
        "id": "5243695fcbc82cd6",
        "type": "http response",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 2240,
        "y": 1900,
        "wires": []
    },
    {
        "id": "d1dc58abaa8fdd02",
        "type": "http response",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "name": "response_error",
        "statusCode": "400",
        "headers": {},
        "x": 2020,
        "y": 1860,
        "wires": []
    },
    {
        "id": "03cdf80309d00fdd",
        "type": "mysql",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "mydb": "443dca5366e7983c",
        "name": "",
        "x": 760,
        "y": 1660,
        "wires": [
            [
                "22cfcc851a1f1dcb"
            ]
        ]
    },
    {
        "id": "f58c856ef93b8919",
        "type": "mysql",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "mydb": "443dca5366e7983c",
        "name": "",
        "x": 620,
        "y": 1740,
        "wires": [
            [
                "e1dfc631c7092deb"
            ]
        ]
    },
    {
        "id": "e0fdbc9b53a37e07",
        "type": "mysql",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "mydb": "443dca5366e7983c",
        "name": "",
        "x": 920,
        "y": 1760,
        "wires": [
            [
                "27c6ba67c509ae21"
            ]
        ]
    },
    {
        "id": "338a5459c259ecb0",
        "type": "mysql",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "mydb": "443dca5366e7983c",
        "name": "",
        "x": 1520,
        "y": 1800,
        "wires": [
            [
                "2784bf0207fb79f1"
            ]
        ]
    },
    {
        "id": "498f59dd1e610291",
        "type": "mysql",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "mydb": "443dca5366e7983c",
        "name": "",
        "x": 1320,
        "y": 1720,
        "wires": [
            [
                "e3c4ea068077a80f"
            ]
        ]
    },
    {
        "id": "6fa92bff013a605f",
        "type": "mysql",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "mydb": "443dca5366e7983c",
        "name": "",
        "x": 1600,
        "y": 1680,
        "wires": [
            [
                "6c8b7f203d7fad54"
            ]
        ]
    },
    {
        "id": "ebbbc1f7d5bba450",
        "type": "mysql",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "mydb": "443dca5366e7983c",
        "name": "",
        "x": 2040,
        "y": 1680,
        "wires": [
            [
                "509de403e86b1dd2"
            ]
        ]
    },
    {
        "id": "fa5a8218cf6cd2ba",
        "type": "json",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 130,
        "y": 1720,
        "wires": [
            [
                "2264c1f2fc046785"
            ]
        ]
    },
    {
        "id": "509de403e86b1dd2",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "name": "handle_result",
        "func": "const result = msg.payload || [];\nconst selectObject = result[0];\n\nmsg.statusCode = 200;\nmsg.payload = {\n    ok: true,\n    message: 'Booking approved successfully',\n    result: selectObject\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2140,
        "y": 1760,
        "wires": [
            [
                "5243695fcbc82cd6",
                "8033a98a0b984807"
            ]
        ]
    },
    {
        "id": "8033a98a0b984807",
        "type": "link out",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "20b6c09cf936e09b",
            "83a70607a20416e0"
        ],
        "x": 2275,
        "y": 1700,
        "wires": []
    },
    {
        "id": "e5b8b4bf8f7125d3",
        "type": "jwt verify",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "name": "verify_jwt",
        "alg": [
            "HS512"
        ],
        "jwkurl": "",
        "secret": "msg.secret",
        "key": "",
        "signvar": "bearer",
        "storetoken": "token",
        "x": 320,
        "y": 1860,
        "wires": [
            [
                "6ab0bbf66ae5ee01"
            ]
        ]
    },
    {
        "id": "2264c1f2fc046785",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "name": "get_secret_key",
        "func": "msg.secret = env.get('JWT_SECRET_KEY')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1860,
        "wires": [
            [
                "e5b8b4bf8f7125d3"
            ]
        ]
    },
    {
        "id": "6ab0bbf66ae5ee01",
        "type": "role-check",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "name": "role_check",
        "requiredRole": "ADMIN",
        "x": 470,
        "y": 1860,
        "wires": [
            [
                "ef48bb785c4baeaf"
            ],
            [
                "d1dc58abaa8fdd02"
            ]
        ]
    },
    {
        "id": "09f0bb0669b6a0af",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "name": "handle_invalid_token",
        "func": "msg.statusCode = 401;\nmsg.payload = {\n    ok: false,\n    message: \"Invalid or missing token!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1920,
        "wires": [
            [
                "5243695fcbc82cd6"
            ]
        ]
    },
    {
        "id": "55e160807079571b",
        "type": "catch",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "name": "catch",
        "scope": [
            "e5b8b4bf8f7125d3"
        ],
        "uncaught": false,
        "x": 290,
        "y": 1920,
        "wires": [
            [
                "09f0bb0669b6a0af"
            ]
        ]
    },
    {
        "id": "da5c0f351906902b",
        "type": "catch",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "name": "catch_unhandled_errors",
        "scope": "group",
        "uncaught": true,
        "x": 350,
        "y": 1980,
        "wires": [
            [
                "650f1579f1d62527"
            ]
        ]
    },
    {
        "id": "650f1579f1d62527",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "name": "handle_unhandled_errors",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    ok: false,\n    message: \"Internal Server Error!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1980,
        "wires": [
            [
                "5243695fcbc82cd6"
            ]
        ]
    },
    {
        "id": "884dbc834c6e5c30",
        "type": "http in",
        "z": "bd5efab3a54ad20c",
        "g": "504069dc06829e62",
        "name": "GET /api/bookings",
        "url": "/api/bookings",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "0712b4ea054f8946",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "f27de9691e262046"
            ]
        ]
    },
    {
        "id": "897273774df7fcfc",
        "type": "debug",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 680,
        "wires": []
    },
    {
        "id": "9c33635f345b25e7",
        "type": "debug",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "req",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 400,
        "wires": []
    },
    {
        "id": "b1df615bc7d3d852",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "e3ede9509861dd36",
        "name": "handle_error_response",
        "func": "msg.statusCode = 400;\nmsg.payload = {\n    ok: false,\n    message: \"Cannot approve this booking!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 560,
        "wires": [
            [
                "7c9dd83c0d5efa4a"
            ]
        ]
    },
    {
        "id": "47ae447451fd8118",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "b83eba8ab2a13179",
        "name": "handle_error_response",
        "func": "msg.statusCode = 400;\nmsg.payload = {\n    ok: false,\n    message: \"Cannot reject this booking!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1360,
        "wires": [
            [
                "83121f413b1f8062"
            ]
        ]
    },
    {
        "id": "2784bf0207fb79f1",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "4180c6902cea3879",
        "name": "handle_error_response",
        "func": "msg.statusCode = 400;\nmsg.payload = {\n    ok: false,\n    message: \"Cannot cancel this booking!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1800,
        "wires": [
            [
                "d1dc58abaa8fdd02"
            ]
        ]
    },
    {
        "id": "793ab45e4a9c57b7",
        "type": "catch",
        "z": "bd5efab3a54ad20c",
        "g": "224b4e5df0a4aff1",
        "name": "catch_unhandled_errors",
        "scope": "group",
        "uncaught": true,
        "x": 350,
        "y": 1120,
        "wires": [
            [
                "b923140d6bc0a35a"
            ]
        ]
    },
    {
        "id": "b923140d6bc0a35a",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "224b4e5df0a4aff1",
        "name": "handle_unhandled_errors",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    ok: false,\n    message: \"Internal Server Error\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "23bcda06d730b551",
        "type": "catch",
        "z": "bd5efab3a54ad20c",
        "g": "504069dc06829e62",
        "name": "catch_unhandled_errors",
        "scope": "group",
        "uncaught": true,
        "x": 350,
        "y": 300,
        "wires": [
            [
                "68ef2017d8d63028"
            ]
        ]
    },
    {
        "id": "68ef2017d8d63028",
        "type": "function",
        "z": "bd5efab3a54ad20c",
        "g": "504069dc06829e62",
        "name": "handle_unhandled_errors",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    ok: false,\n    message: \"Internal Server Error\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 300,
        "wires": [
            [
                "f49e1e067a9d555c"
            ]
        ]
    },
    {
        "id": "4bc1e1e3301be371",
        "type": "http in",
        "z": "1f9ad198f05c78e0",
        "g": "7451396dbeecdd0d",
        "name": "GET /api/my-bookings",
        "url": "/api/my-bookings",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "0012e4184beb4eda",
        "x": 180,
        "y": 100,
        "wires": [
            [
                "1994a1d8db5bae35"
            ]
        ]
    },
    {
        "id": "1f14ed077d48e282",
        "type": "http response",
        "z": "1f9ad198f05c78e0",
        "g": "7451396dbeecdd0d",
        "name": "response",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1480,
        "y": 180,
        "wires": []
    },
    {
        "id": "694abf437cc3aff9",
        "type": "mysql",
        "z": "1f9ad198f05c78e0",
        "g": "7451396dbeecdd0d",
        "mydb": "443dca5366e7983c",
        "name": "mysql",
        "x": 890,
        "y": 100,
        "wires": [
            [
                "aa1ea3764e89ebf5"
            ]
        ]
    },
    {
        "id": "d467e2ed1c706795",
        "type": "function",
        "z": "1f9ad198f05c78e0",
        "g": "7451396dbeecdd0d",
        "name": "build_query",
        "func": "const filters = msg.req.query || {};\n\nconst user_id = msg.token.user_id\n\nlet sql = `\n  SELECT \n    b.booking_id,\n    b.title,\n    b.room_id,\n    r.room_name AS room_name,\n    b.user_id,\n    us.username,\n    b.start_time,\n    b.end_time,\n    b.status,\n    ur.username AS action_by,\n    b.action_at,\n    b.action_reason\n  FROM bookings b\n  INNER JOIN users us ON b.user_id = us.user_id\n  LEFT JOIN users ur ON b.action_by = ur.user_id\n  INNER JOIN rooms r ON b.room_id = r.room_id\n  WHERE b.user_id = ${user_id}\n`;\n\nlet params = [];\nlet countParams = [];\nlet conditions = [];\n\nif (filters.room_name && filters.room_name) {\n  conditions.push('r.room_name LIKE ?');\n  params.push(`%${filters.room_name}%`);\n  countParams.push(`%${filters.room_name.trim()}%`);\n}\n\nif (filters.start_time) {\n  const start_time = new Date(filters.start_time);\n\n  if (isNaN(start_time.getTime())) {\n    msg.statusCode = 400;\n    msg.payload = {\n      ok: false,\n      message: 'Invalid start time'\n    };\n    return [null, msg];\n  }\n  conditions.push('b.start_time >= ?');\n  params.push(filters.start_time);\n  countParams.push(filters.start_time);\n}\n\nif (filters.status && filters.status) {\n  conditions.push('b.status = ?');\n  params.push(filters.status.trim());\n  countParams.push(filters.status);\n}\n\nif (conditions.length > 0) {\n  sql += ' AND ' + conditions.join(' AND ');\n}\n\nsql += ' GROUP BY b.booking_id';\n\nsql += ' ORDER BY b.start_time DESC';\n\n// Pagination\nif (filters.limit && !isNaN(parseInt(filters.limit, 10))) {\n  sql += ' LIMIT ?';\n  params.push(parseInt(filters.limit, 10));\n}\nif (filters.offset && !isNaN(parseInt(filters.offset, 10))) {\n  sql += ' OFFSET ?';\n  params.push(parseInt(filters.offset, 10));\n}\n\n// Count query for total rows\nconst countSql = `\n  SELECT COUNT(DISTINCT b.booking_id) AS total_count\n  FROM bookings b\n  INNER JOIN users us ON b.user_id = us.user_id\n  LEFT JOIN users ur ON b.action_by = ur.user_id\n  INNER JOIN rooms r ON b.room_id = r.room_id\n  WHERE b.user_id = ${user_id}\n   ${conditions.length > 0 ? ' AND ' + conditions.join(' AND ') : ''}\n`;\n\n// Combine queries\nmsg.topic = `${countSql};${sql}`;\nmsg.payload = [...countParams, ...params];\n\n// Debug\nnode.warn(`Filters: ${JSON.stringify(filters)}`);\nnode.warn(`Main SQL: ${sql}`);\nnode.warn(`Count SQL: ${countSql}`);\nnode.warn(`Count Params: ${JSON.stringify(countParams)}`);\nnode.warn(`Main Params: ${JSON.stringify(params)}`);\nnode.warn(`Total Params: ${JSON.stringify(msg.payload)}`);\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 100,
        "wires": [
            [
                "694abf437cc3aff9"
            ],
            [
                "1f14ed077d48e282"
            ]
        ]
    },
    {
        "id": "aa1ea3764e89ebf5",
        "type": "function",
        "z": "1f9ad198f05c78e0",
        "g": "7451396dbeecdd0d",
        "name": "handle_result",
        "func": "const [countResult, mainResult] = msg.payload || [[], []];\n\nif(!mainResult || mainResult.length === 0){\n    msg.statusCode = 404\n    msg.payload = {\n        ok: false,\n        message: \"Booking not found\"\n    }\n    return msg;\n}\n\nconst bookings = mainResult.map(row => ({\n    booking_id: row.booking_id,\n    title: row.title,\n    room_id: row.room_id,\n    room_name: row.room_name,\n    user_id: row.user_id,\n    username: row.username,\n    start_time: row.start_time,\n    end_time: row.end_time,\n    status: row.status,\n    action_by: row.action_by,\n    action_at: row.action_at,\n    action_reason: row.action_reason\n}));\n\n// Format response\nmsg.payload = {\n    result: bookings,\n    total_count: countResult[0]?.total_count || 0\n};\n\n// Debug\nnode.warn(`Result rows: ${JSON.stringify(bookings)}`);\nnode.warn(`Total count: ${countResult[0]?.total_count || 0}`);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 100,
        "wires": [
            [
                "1f14ed077d48e282"
            ]
        ]
    },
    {
        "id": "6ccf5e0db011d125",
        "type": "jwt verify",
        "z": "1f9ad198f05c78e0",
        "g": "7451396dbeecdd0d",
        "name": "verify_jwt",
        "alg": [
            "HS512"
        ],
        "jwkurl": "",
        "secret": "msg.secret",
        "key": "",
        "signvar": "bearer",
        "storetoken": "token",
        "x": 560,
        "y": 100,
        "wires": [
            [
                "d467e2ed1c706795"
            ]
        ]
    },
    {
        "id": "1994a1d8db5bae35",
        "type": "function",
        "z": "1f9ad198f05c78e0",
        "g": "7451396dbeecdd0d",
        "name": "get_secret_key",
        "func": "msg.secret = env.get('JWT_SECRET_KEY')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 100,
        "wires": [
            [
                "6ccf5e0db011d125"
            ]
        ]
    },
    {
        "id": "dad71a52c698f1f0",
        "type": "function",
        "z": "1f9ad198f05c78e0",
        "g": "7451396dbeecdd0d",
        "name": "handle_invalid_token",
        "func": "msg.statusCode = 401;\nmsg.payload = {\n    ok: false,\n    message: \"Invalid or missing token!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 180,
        "wires": [
            [
                "1f14ed077d48e282"
            ]
        ]
    },
    {
        "id": "c1715a202d930714",
        "type": "catch",
        "z": "1f9ad198f05c78e0",
        "g": "7451396dbeecdd0d",
        "name": "catch",
        "scope": [
            "6ccf5e0db011d125"
        ],
        "uncaught": false,
        "x": 490,
        "y": 180,
        "wires": [
            [
                "dad71a52c698f1f0"
            ]
        ]
    },
    {
        "id": "90c0eef733541071",
        "type": "http in",
        "z": "1f9ad198f05c78e0",
        "g": "d08782927857db71",
        "name": "POST /api/my-bookings/:booking_id/cancel",
        "url": "/api/my-bookings/:booking_id/cancel",
        "method": "post",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "13c01cadfd978a95",
        "x": 200,
        "y": 360,
        "wires": [
            [
                "4a29b7e628b685a0"
            ]
        ]
    },
    {
        "id": "2daef27ecde9bc49",
        "type": "http response",
        "z": "1f9ad198f05c78e0",
        "g": "d08782927857db71",
        "name": "response",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1540,
        "y": 440,
        "wires": []
    },
    {
        "id": "d66f47967ece8973",
        "type": "mysql",
        "z": "1f9ad198f05c78e0",
        "g": "d08782927857db71",
        "mydb": "443dca5366e7983c",
        "name": "mysql",
        "x": 1090,
        "y": 340,
        "wires": [
            [
                "2f687e1ccb4bc830"
            ]
        ]
    },
    {
        "id": "f88f6ebc293717bf",
        "type": "function",
        "z": "1f9ad198f05c78e0",
        "g": "d08782927857db71",
        "name": "build_query",
        "func": "const booking_id = msg.req?.params?.booking_id;\nif (!booking_id || isNaN(parseInt(booking_id, 10))) {\n  msg.statusCode = 400;\n  msg.payload = { ok: false, message: 'Invalid or missing booking_id' };\n  return [null, msg];\n}\n\nconst user_id = msg.token.user_id;\n\nlet existSql = `\n  SELECT 1 FROM bookings \n  WHERE booking_id = ? AND status = 'PENDING';\n`;\n\nlet cancelSql = `\n  UPDATE bookings \n  SET status = 'CANCELLED', action_by = ?, action_at = NOW()\n  WHERE booking_id = ? AND user_id = ? AND status = 'PENDING';\n`;\n\nlet existParams = [parseInt(booking_id, 10)];\nlet cancelParams = [parseInt(user_id, 10), parseInt(booking_id, 10), parseInt(user_id, 10)];\nlet select = `\nSELECT r.room_id, b.booking_id, r.room_name, b.start_time, b.end_time, u.user_id, b.status\nFROM bookings b \nJOIN rooms r ON b.room_id = r.room_id\nJOIN users u ON b.user_id = u.user_id\nWHERE b.booking_id = ?\nGROUP BY b.room_id\nLIMIT 1;\n`;\n// Combine queries in a transaction\nmsg.topic = `\n  ${existSql}\n  ${cancelSql}\n  ${select}\n`;\nmsg.payload = [...existParams, ...cancelParams, booking_id];\n\n// Debug\nnode.warn(`Booking ID: ${booking_id}`);\nnode.warn(`Admin ID: ${user_id}`);\nnode.warn(`SQL: ${msg.topic}`);\nnode.warn(`Params: ${JSON.stringify(msg.payload)}`);\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 360,
        "wires": [
            [
                "d66f47967ece8973"
            ],
            [
                "2daef27ecde9bc49"
            ]
        ]
    },
    {
        "id": "2f687e1ccb4bc830",
        "type": "function",
        "z": "1f9ad198f05c78e0",
        "g": "d08782927857db71",
        "name": "handle_result",
        "func": "const results = msg.payload || [];\n\nconst existenceResult = results[0] || [];\nif (!existenceResult || existenceResult.length === 0) {\n    msg.statusCode = 404;\n    msg.payload = {\n        ok: false,\n        message: 'Booking not found or not PENDING'\n    };\n    return [null, msg];\n}\n\nconst bookingCancelResult = results[1] || {};\nif (bookingCancelResult.affectedRows === 0) {\n    msg.statusCode = 400;\n    msg.payload = {\n        ok: false,\n        message: 'Failed to cancel booking'\n    };\n    return [null, msg];\n}\n\nconst selectResult = results[2] || [];\nconst selectObject = selectResult[0];\n\nmsg.statusCode = 200;\nmsg.payload = {\n    ok: true,\n    message: 'Booking cancelled successfully',\n    result: selectObject\n};\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 340,
        "wires": [
            [
                "2daef27ecde9bc49",
                "8a68fe56d0ce9d2b"
            ],
            [
                "2daef27ecde9bc49"
            ]
        ]
    },
    {
        "id": "aebeee91a1e69f0e",
        "type": "jwt verify",
        "z": "1f9ad198f05c78e0",
        "g": "d08782927857db71",
        "name": "verify_jwt",
        "alg": [
            "HS512"
        ],
        "jwkurl": "",
        "secret": "msg.secret",
        "key": "",
        "signvar": "bearer",
        "storetoken": "token",
        "x": 760,
        "y": 360,
        "wires": [
            [
                "f88f6ebc293717bf",
                "e1457a63b4ab7e12"
            ]
        ]
    },
    {
        "id": "8089bf6139fa5cc1",
        "type": "function",
        "z": "1f9ad198f05c78e0",
        "g": "d08782927857db71",
        "name": "get_secret_key",
        "func": "msg.secret = env.get('JWT_SECRET_KEY')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 360,
        "wires": [
            [
                "aebeee91a1e69f0e"
            ]
        ]
    },
    {
        "id": "ede2942c134e8197",
        "type": "function",
        "z": "1f9ad198f05c78e0",
        "g": "d08782927857db71",
        "name": "handle_invalid_token",
        "func": "msg.statusCode = 401;\nmsg.payload = {\n    ok: false,\n    message: \"Invalid or missing token!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 460,
        "wires": [
            [
                "2daef27ecde9bc49"
            ]
        ]
    },
    {
        "id": "b6d2c489811ca47d",
        "type": "catch",
        "z": "1f9ad198f05c78e0",
        "g": "d08782927857db71",
        "name": "catch",
        "scope": [
            "aebeee91a1e69f0e"
        ],
        "uncaught": false,
        "x": 450,
        "y": 460,
        "wires": [
            [
                "ede2942c134e8197"
            ]
        ]
    },
    {
        "id": "4a29b7e628b685a0",
        "type": "json",
        "z": "1f9ad198f05c78e0",
        "g": "d08782927857db71",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 450,
        "y": 360,
        "wires": [
            [
                "8089bf6139fa5cc1"
            ]
        ]
    },
    {
        "id": "e1457a63b4ab7e12",
        "type": "debug",
        "z": "1f9ad198f05c78e0",
        "g": "d08782927857db71",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "token",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 420,
        "wires": []
    },
    {
        "id": "8a68fe56d0ce9d2b",
        "type": "link out",
        "z": "1f9ad198f05c78e0",
        "g": "d08782927857db71",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "20b6c09cf936e09b"
        ],
        "x": 1505,
        "y": 340,
        "wires": []
    },
    {
        "id": "2b3116444771ed19",
        "type": "catch",
        "z": "1f9ad198f05c78e0",
        "g": "7451396dbeecdd0d",
        "name": "catch_unhandled_errors",
        "scope": "group",
        "uncaught": true,
        "x": 550,
        "y": 220,
        "wires": [
            [
                "4f53c1fc3ad29e5d"
            ]
        ]
    },
    {
        "id": "4f53c1fc3ad29e5d",
        "type": "function",
        "z": "1f9ad198f05c78e0",
        "g": "7451396dbeecdd0d",
        "name": "handle_unhandled_errors",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    ok: false,\n    message: \"Internal Server Error\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 220,
        "wires": [
            [
                "1f14ed077d48e282"
            ]
        ]
    },
    {
        "id": "4fe731263751ee6a",
        "type": "catch",
        "z": "1f9ad198f05c78e0",
        "g": "d08782927857db71",
        "name": "catch_unhandled_errors",
        "scope": "group",
        "uncaught": true,
        "x": 510,
        "y": 500,
        "wires": [
            [
                "aa15b3e082f78521"
            ]
        ]
    },
    {
        "id": "aa15b3e082f78521",
        "type": "function",
        "z": "1f9ad198f05c78e0",
        "g": "d08782927857db71",
        "name": "handle_unhandled_errors",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    ok: false,\n    message: \"Internal Server Error\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 500,
        "wires": [
            [
                "2daef27ecde9bc49"
            ]
        ]
    },
    {
        "id": "1559a397916dbc81",
        "type": "http in",
        "z": "ef473e5856f6634c",
        "g": "01efc9251ab27577",
        "name": "GET /api/schedules",
        "url": "/api/schedules",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "fdbe95dd413cfef8",
        "x": 190,
        "y": 120,
        "wires": [
            [
                "681f51eb831cf4e4"
            ]
        ]
    },
    {
        "id": "156d551f9094bd51",
        "type": "http response",
        "z": "ef473e5856f6634c",
        "g": "01efc9251ab27577",
        "name": "response",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1460,
        "y": 200,
        "wires": []
    },
    {
        "id": "63959d4082a511b2",
        "type": "mysql",
        "z": "ef473e5856f6634c",
        "g": "01efc9251ab27577",
        "mydb": "443dca5366e7983c",
        "name": "mysql",
        "x": 950,
        "y": 120,
        "wires": [
            [
                "7508071c22bef509"
            ]
        ]
    },
    {
        "id": "45db05f2a8852e07",
        "type": "function",
        "z": "ef473e5856f6634c",
        "g": "01efc9251ab27577",
        "name": "build_query",
        "func": "const filters = msg.req.query || {};\n\nif (!filters.start_time || !filters.end_time || !filters.room_id) {\n  msg.statusCode = 400;\n  msg.payload = {\n    ok: false,\n    message: \"Missing required fields!\"\n  }\n  return [null, msg];\n}\nconst start_time = new Date(filters.start_time);\nconst end_time = new Date(filters.end_time);\n\nif (isNaN(start_time.getTime()) || isNaN(end_time.getTime())) {\n  msg.statusCode = 400;\n  msg.payload = {\n    ok: false,\n    message: 'Invalid booking start time or end time'\n  };\n  return [null, msg];\n}\n\nif (start_time > end_time) {\n  msg.statusCode = 400;\n  msg.payload = {\n    ok: false,\n    message: 'Booking start time cannot be after end time'\n  };\n  return [null, msg];\n}\n\nconst formatDateForSQL = (date) => {\n  const offset = 7 * 60;\n  const adjustedDate = new Date(date.getTime() + offset * 60 * 1000);\n  return adjustedDate.toISOString().replace('T', ' ').substring(0, 19);\n};\nconst sqlStartTime = formatDateForSQL(start_time);\nconst sqlEndTime = formatDateForSQL(end_time);\n\nmsg.topic = `\n  SELECT \n    booking_id,\n    start_time,\n    end_time,\n    status\n  FROM bookings\n  WHERE status IN ('PENDING', 'APPROVED')\n  AND room_id = ?\n  AND start_time >= ? AND end_time <= ?\n`;\n\nmsg.payload = [parseInt(filters.room_id, 10), sqlStartTime, sqlEndTime]\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 120,
        "wires": [
            [
                "63959d4082a511b2"
            ],
            [
                "156d551f9094bd51"
            ]
        ]
    },
    {
        "id": "7508071c22bef509",
        "type": "function",
        "z": "ef473e5856f6634c",
        "g": "01efc9251ab27577",
        "name": "handle_result",
        "func": "const mainResult = msg.payload || [];\n\nif(!mainResult || mainResult.length == 0){\n    msg.statusCode = 400;\n    return msg;\n}\n\nconst bookings = mainResult.map(row => ({\n    booking_id: row.booking_id,\n    start_time: row.start_time,\n    end_time: row.end_time,\n    status: row.status,\n    \n}));\n\n// Format response\nmsg.statusCode = 200;\nmsg.payload = {\n    result: bookings,\n};\n\n// Debug\nnode.warn(`Result rows: ${JSON.stringify(bookings)}`);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 120,
        "wires": [
            [
                "156d551f9094bd51"
            ]
        ]
    },
    {
        "id": "22a843db0fbf92fb",
        "type": "jwt verify",
        "z": "ef473e5856f6634c",
        "g": "01efc9251ab27577",
        "name": "verify_jwt",
        "alg": [
            "HS512"
        ],
        "jwkurl": "",
        "secret": "msg.secret",
        "key": "",
        "signvar": "bearer",
        "storetoken": "token",
        "x": 540,
        "y": 120,
        "wires": [
            [
                "45db05f2a8852e07"
            ]
        ]
    },
    {
        "id": "681f51eb831cf4e4",
        "type": "function",
        "z": "ef473e5856f6634c",
        "g": "01efc9251ab27577",
        "name": "get_secret_key",
        "func": "msg.secret = env.get('JWT_SECRET_KEY')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 120,
        "wires": [
            [
                "22a843db0fbf92fb"
            ]
        ]
    },
    {
        "id": "2c726c3038e4c793",
        "type": "function",
        "z": "ef473e5856f6634c",
        "g": "01efc9251ab27577",
        "name": "handle_invalid_token",
        "func": "msg.statusCode = 401;\nmsg.payload = {\n    ok: false,\n    message: \"Invalid or missing token!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 300,
        "wires": [
            [
                "156d551f9094bd51"
            ]
        ]
    },
    {
        "id": "24d024c054437478",
        "type": "catch",
        "z": "ef473e5856f6634c",
        "g": "01efc9251ab27577",
        "name": "catch",
        "scope": [
            "22a843db0fbf92fb"
        ],
        "uncaught": false,
        "x": 320,
        "y": 300,
        "wires": [
            [
                "2c726c3038e4c793"
            ]
        ]
    },
    {
        "id": "94bdb6158ef11a00",
        "type": "catch",
        "z": "ef473e5856f6634c",
        "g": "01efc9251ab27577",
        "name": "catch_unhandled_errors",
        "scope": "group",
        "uncaught": true,
        "x": 390,
        "y": 240,
        "wires": [
            [
                "80a880d798c8e049"
            ]
        ]
    },
    {
        "id": "80a880d798c8e049",
        "type": "function",
        "z": "ef473e5856f6634c",
        "g": "01efc9251ab27577",
        "name": "handle_unhandled_errors",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    ok: false,\n    message: \"Internal Server Error\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 240,
        "wires": [
            [
                "156d551f9094bd51"
            ]
        ]
    },
    {
        "id": "bc5b3d729a98eac6",
        "type": "http in",
        "z": "ad6b87de6e10c339",
        "g": "7d57500539d60d1e",
        "name": "GET /api/audit-logs",
        "url": "/api/audit-logs",
        "method": "get",
        "upload": false,
        "skipBodyParsing": false,
        "swaggerDoc": "de5d441597bd8d11",
        "x": 250,
        "y": 160,
        "wires": [
            [
                "03ce3017c78e4172"
            ]
        ]
    },
    {
        "id": "e6fac01ece71eb84",
        "type": "http response",
        "z": "ad6b87de6e10c339",
        "g": "7d57500539d60d1e",
        "name": "response",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1520,
        "y": 240,
        "wires": []
    },
    {
        "id": "096143eadbc9e208",
        "type": "mysql",
        "z": "ad6b87de6e10c339",
        "g": "7d57500539d60d1e",
        "mydb": "443dca5366e7983c",
        "name": "mysql",
        "x": 1170,
        "y": 160,
        "wires": [
            [
                "eaec2353243ea4ce"
            ]
        ]
    },
    {
        "id": "d001d5d0cb43f8b9",
        "type": "function",
        "z": "ad6b87de6e10c339",
        "g": "7d57500539d60d1e",
        "name": "build_query",
        "func": "const filters = msg.req.query || {};\n\nlet sql = `\n  SELECT \n\tur.username AS username,\n    b.booking_id,\n    b.title,\n    b.room_id,\n    r.room_name AS room_name,\n    b.start_time,\n    b.end_time,\n    b.status,\n    u.username AS action_by,\n    b.action_at,\n    b.action_reason\n  FROM audit_logs l\n  JOIN bookings b ON l.booking_id = b.booking_id\n  JOIN users u ON l.action_by = u.user_id\n  JOIN rooms r ON b.room_id = r.room_id\n  JOIN users ur ON ur.user_id = b.user_id\n  WHERE 1=1\n`;\n\nlet params = [];\nlet countParams = [];\nlet conditions = [];\n\nif (filters.room_name && filters.room_name) {\n  conditions.push('r.room_name LIKE ?');\n  params.push(`%${filters.room_name}%`);\n  countParams.push(`%${filters.room_name.trim()}%`);\n}\n\nif (filters.username) {\n  conditions.push('ur.username LIKE ?');\n  params.push(`%${filters.username}%`);\n  countParams.push(`%${filters.username.trim()}%`);\n}\n\nif (filters.start_time && filters.start_time) {\n  const start_time = new Date(filters.start_time);\n\n  if (isNaN(start_time.getTime())) {\n    msg.statusCode = 400;\n    msg.payload = {\n      ok: false,\n      message: 'Invalid booking start time or end time'\n    };\n    return [null, msg];\n  }\n\n  conditions.push('b.start_time >= ?');\n  params.push(filters.start_time);\n  countParams.push(filters.start_time);\n}\n\nif (filters.status && filters.status) {\n  conditions.push('b.status = ?');\n  params.push(filters.status.trim());\n  countParams.push(filters.status);\n}\n\nif (conditions.length > 0) {\n  sql += ' AND ' + conditions.join(' AND ');\n}\n\nsql += ' GROUP BY l.log_id';\n\nsql += ' ORDER BY b.start_time DESC';\n\n// Pagination\nif (filters.limit && !isNaN(parseInt(filters.limit, 10))) {\n  sql += ' LIMIT ?';\n  params.push(parseInt(filters.limit, 10));\n}\nif (filters.offset && !isNaN(parseInt(filters.offset, 10))) {\n  sql += ' OFFSET ?';\n  params.push(parseInt(filters.offset, 10));\n}\n\n// Count query for total rows\nconst countSql = `\n  SELECT COUNT(DISTINCT l.log_id) AS total_count\n  FROM audit_logs l\n  JOIN bookings b ON l.booking_id = b.booking_id\n  JOIN users u ON l.action_by = u.user_id\n  JOIN rooms r ON b.room_id = r.room_id\n  JOIN users ur ON ur.user_id = b.user_id\n  WHERE 1=1\n   ${conditions.length > 0 ? ' AND ' + conditions.join(' AND ') : ''}\n`;\n\n// Combine queries\nmsg.topic = `${countSql};${sql}`;\nmsg.payload = [...countParams, ...params];\n\n// Debug\nnode.warn(`Filters: ${JSON.stringify(filters)}`);\nnode.warn(`Main SQL: ${sql}`);\nnode.warn(`Count SQL: ${countSql}`);\nnode.warn(`Count Params: ${JSON.stringify(countParams)}`);\nnode.warn(`Main Params: ${JSON.stringify(params)}`);\nnode.warn(`Total Params: ${JSON.stringify(msg.payload)}`);\n\nreturn [msg, null];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920.1041717529297,
        "y": 170.09722900390625,
        "wires": [
            [
                "096143eadbc9e208"
            ],
            [
                "e6fac01ece71eb84"
            ]
        ]
    },
    {
        "id": "eaec2353243ea4ce",
        "type": "function",
        "z": "ad6b87de6e10c339",
        "g": "7d57500539d60d1e",
        "name": "handle_result",
        "func": "const [countResult, mainResult] = msg.payload || [[], []];\n\nconst bookings = mainResult.map(row => ({\n    log_id: row.log_id,\n    room_id: row.room_id,\n    room_name: row.room_name,\n    user_id: row.user_id,\n    username: row.username,\n    start_time: row.start_time,\n    end_time: row.end_time,\n    status: row.status,\n    action_by: row.action_by,\n    action_at: row.action_at,\n    action_reason: row.action_reason\n}));\n\n// Format response\nmsg.payload = {\n    result: bookings,\n    total_count: countResult[0]?.total_count || 0\n};\n\n// Debug\nnode.warn(`Result rows: ${JSON.stringify(bookings)}`);\nnode.warn(`Total count: ${countResult[0]?.total_count || 0}`);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 160,
        "wires": [
            [
                "e6fac01ece71eb84"
            ]
        ]
    },
    {
        "id": "3ccf9ffbcaf225cd",
        "type": "jwt verify",
        "z": "ad6b87de6e10c339",
        "g": "7d57500539d60d1e",
        "name": "verify_jwt",
        "alg": [
            "HS512"
        ],
        "jwkurl": "",
        "secret": "msg.secret",
        "key": "",
        "signvar": "bearer",
        "storetoken": "token",
        "x": 600,
        "y": 160,
        "wires": [
            [
                "6a39f92812cc1a82"
            ]
        ]
    },
    {
        "id": "03ce3017c78e4172",
        "type": "function",
        "z": "ad6b87de6e10c339",
        "g": "7d57500539d60d1e",
        "name": "get_secret_key",
        "func": "msg.secret = env.get('JWT_SECRET_KEY')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 160,
        "wires": [
            [
                "3ccf9ffbcaf225cd"
            ]
        ]
    },
    {
        "id": "6a39f92812cc1a82",
        "type": "role-check",
        "z": "ad6b87de6e10c339",
        "g": "7d57500539d60d1e",
        "name": "role_check",
        "requiredRole": "ADMIN",
        "x": 780,
        "y": 240,
        "wires": [
            [
                "d001d5d0cb43f8b9"
            ],
            [
                "e6fac01ece71eb84"
            ]
        ]
    },
    {
        "id": "0728023a9a46bab6",
        "type": "function",
        "z": "ad6b87de6e10c339",
        "g": "7d57500539d60d1e",
        "name": "handle_invalid_token",
        "func": "msg.statusCode = 400;\nmsg.payload = {\n    ok: false,\n    message: \"Invalid or missing token!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 340,
        "wires": [
            [
                "e6fac01ece71eb84"
            ]
        ]
    },
    {
        "id": "2c82a5750c1fc9c6",
        "type": "catch",
        "z": "ad6b87de6e10c339",
        "g": "7d57500539d60d1e",
        "name": "catch jwt",
        "scope": [
            "3ccf9ffbcaf225cd"
        ],
        "uncaught": false,
        "x": 390,
        "y": 340,
        "wires": [
            [
                "0728023a9a46bab6",
                "08bff8baafb751bc"
            ]
        ]
    },
    {
        "id": "08bff8baafb751bc",
        "type": "debug",
        "z": "ad6b87de6e10c339",
        "g": "7d57500539d60d1e",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 380,
        "wires": []
    },
    {
        "id": "e7ada9b6bfd5b994",
        "type": "catch",
        "z": "ad6b87de6e10c339",
        "g": "7d57500539d60d1e",
        "name": "",
        "scope": "group",
        "uncaught": true,
        "x": 390,
        "y": 440,
        "wires": [
            [
                "c926a16db63b18b5"
            ]
        ]
    },
    {
        "id": "c926a16db63b18b5",
        "type": "function",
        "z": "ad6b87de6e10c339",
        "g": "7d57500539d60d1e",
        "name": "handle_unhandled_errors",
        "func": "msg.statusCode = 500;\nmsg.payload = {\n    ok: false,\n    message: \"Internal Server Error!\"\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 440,
        "wires": [
            [
                "e6fac01ece71eb84"
            ]
        ]
    },
    {
        "id": "960c6df0e138e3d6",
        "type": "function",
        "z": "7b1d8464d4eeb295",
        "g": "44c1d437b2505fb5",
        "name": "notification",
        "func": "const affectedRow = msg.payload.result\nconst notificationMsg = {\n    topic: \"notification\",\n    payload: {\n        receiver: affectedRow.user_id,\n        message: `Your booking at room ${affectedRow.room_id}, time start from ${affectedRow.start_time} to ${affectedRow.end_time} already ${String(affectedRow.status).toLowerCase()}`\n    }\n};\n\nnode.send(notificationMsg);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 220,
        "wires": [
            [
                "d3135d685060af63"
            ]
        ]
    },
    {
        "id": "d3135d685060af63",
        "type": "link out",
        "z": "7b1d8464d4eeb295",
        "g": "44c1d437b2505fb5",
        "name": "notification",
        "mode": "link",
        "links": [
            "64b287a5cceee242"
        ],
        "x": 745,
        "y": 220,
        "wires": []
    },
    {
        "id": "83a70607a20416e0",
        "type": "link in",
        "z": "7b1d8464d4eeb295",
        "g": "44c1d437b2505fb5",
        "name": "trigger_notification_channel",
        "links": [
            "753577e69d565b49",
            "d6a9ba42a3b788cc",
            "8033a98a0b984807"
        ],
        "x": 325,
        "y": 220,
        "wires": [
            [
                "960c6df0e138e3d6"
            ]
        ]
    },
    {
        "id": "bc1d3039e6fec733",
        "type": "link out",
        "z": "7b1d8464d4eeb295",
        "g": "3b28d018233610dd",
        "name": "schedule-update",
        "mode": "link",
        "links": [
            "64b287a5cceee242"
        ],
        "x": 745,
        "y": 400,
        "wires": []
    },
    {
        "id": "a7b22cdff551f99d",
        "type": "function",
        "z": "7b1d8464d4eeb295",
        "g": "3b28d018233610dd",
        "name": "schedule_update",
        "func": "const affectedRow = msg.payload.result;\nnode.warn(affectedRow)\nconst scheduleMsg = {\n    topic: \"schedule-update\",\n    payload: {\n        status: affectedRow.status,\n        booking_id: affectedRow.booking_id,\n        start_time: affectedRow.start_time,\n        end_time: affectedRow.end_time       \n    },\n    room_id: affectedRow.room_id\n};\n\nnode.send(scheduleMsg);",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 400,
        "wires": [
            [
                "bc1d3039e6fec733"
            ]
        ]
    },
    {
        "id": "20b6c09cf936e09b",
        "type": "link in",
        "z": "7b1d8464d4eeb295",
        "g": "3b28d018233610dd",
        "name": "trigger_schedule_update_channel",
        "links": [
            "8a68fe56d0ce9d2b",
            "831c579302862374",
            "753577e69d565b49",
            "d6a9ba42a3b788cc",
            "8033a98a0b984807"
        ],
        "x": 325,
        "y": 400,
        "wires": [
            [
                "a7b22cdff551f99d"
            ]
        ]
    }
]